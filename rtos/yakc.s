; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	40
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	41
	; >>>>> while(1){ 
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	42
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	43
	; >>>>> if(YKIdleVar){ 
	mov	ax, word [YKIdleVar]
	test	ax, ax
	je	L_yakc_6
	; >>>>> Line:	44
	; >>>>> YKIdleVar++; 
	inc	word [YKIdleVar]
L_yakc_6:
L_yakc_4:
	jmp	L_yakc_3
L_yakc_5:
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	jmp	L_yakc_2
	ALIGN	2
YKInitialize:
	; >>>>> Line:	49
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	50
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	51
	; >>>>> YKsave = 0; 
	mov	word [YKsave], 0
	; >>>>> Line:	52
	; >>>>> YKrestore = 0; 
	mov	word [YKrestore], 0
	; >>>>> Line:	53
	; >>>>> YKTickCount = 0; 
	mov	word [YKTickCount], 0
	; >>>>> Line:	54
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	55
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	56
	; >>>>> YKRunFlag = 0; 
	mov	word [YKRunFlag], 0
	; >>>>> Line:	57
	; >>>>> YKtaskCount = 0; 
	mov	word [YKtaskCount], 0
	; >>>>> Line:	58
	; >>>>> readyHead = 0; 
	mov	word [readyHead], 0
	; >>>>> Line:	59
	; >>>>> readyTail = 0; 
	mov	word [readyTail], 0
	; >>>>> Line:	60
	; >>>>> blockedHead = 0; 
	mov	word [blockedHead], 0
	; >>>>> Line:	61
	; >>>>> blockedTail = 0; 
	mov	word [blockedTail], 0
	; >>>>> Line:	62
	; >>>>> YKRunningTask = 0; 
	mov	word [YKRunningTask], 0
	; >>>>> Line:	63
	; >>>>> YKIsrDepth = 0; 
	mov	word [YKIsrDepth], 0
	; >>>>> Line:	64
	; >>>>> semCount = 0; 
	mov	word [semCount], 0
	; >>>>> Line:	65
	; >>>>> YKNewTask(&YKIdleTask, &YKIdleStk[256], 1 
	mov	al, 100
	push	ax
	mov	ax, (YKIdleStk+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKNewTask:
	; >>>>> Line:	68
	; >>>>> void YKNewTask(void (*task)(void), int *taskStack, unsigned char priority){ 
	jmp	L_yakc_11
L_yakc_12:
	; >>>>> Line:	72
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	74
	; >>>>> tempSP = taskStack-1; 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	word [bp-4], ax
	; >>>>> Line:	75
	; >>>>> *tempSP = 0x0200; 
	mov	si, word [bp-4]
	mov	word [si], 512
	; >>>>> Line:	76
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	77
	; >>>>> *tempSP = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	78
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	79
	; >>>>> *tempSP = (int)task; 
	mov	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	80
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	81
	; >>>>> *tempSP = (int)(taskStack-1); 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	si, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	82
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	84
	; >>>>> for(k = 0; k <=7; k++){ 
	mov	word [bp-6], 0
	jmp	L_yakc_14
L_yakc_13:
	; >>>>> Line:	85
	; >>>>> *tempSP = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	86
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
L_yakc_16:
	inc	word [bp-6]
L_yakc_14:
	cmp	word [bp-6], 7
	jle	L_yakc_13
L_yakc_15:
	; >>>>> Line:	90
	; >>>>> tempTask = &YKTasks[YKtaskCount]; 
	mov	ax, word [YKtaskCount]
	mov	cx, 10
	imul	cx
	add	ax, YKTasks
	mov	word [bp-2], ax
	; >>>>> Line:	91
	; >>>>> tempTask->taskSP = tempSP+1; 
	mov	ax, word [bp-4]
	add	ax, 2
	mov	si, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	92
	; >>>>> tempTask->taskPriority = priority; 
	mov	si, word [bp-2]
	add	si, 2
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	93
	; >>>>> tempTask->taskDelay = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	95
	; >>>>> YKtaskCount++; 
	inc	word [YKtaskCount]
	; >>>>> Line:	97
	; >>>>>  
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKInsertSorted
	add	sp, 4
	; >>>>> Line:	98
	; >>>>> printStack(tempTask); 
	push	word [bp-2]
	call	printStack
	add	sp, 2
	; >>>>> Line:	99
	; >>>>> printLists(); 
	call	printLists
	; >>>>> Line:	100
	; >>>>> if (YKRunFlag == 1){ 
	cmp	word [YKRunFlag], 1
	jne	L_yakc_17
	; >>>>> Line:	101
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	102
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_17:
	mov	sp, bp
	pop	bp
	ret
L_yakc_11:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_12
L_yakc_19:
	DB	"YKRun Failed: readyHead is Null",0
	ALIGN	2
YKRun:
	; >>>>> Line:	107
	; >>>>> void YKRun(void) { 
	jmp	L_yakc_20
L_yakc_21:
	; >>>>> Line:	108
	; >>>>> if (readyHead != 0){ 
	mov	ax, word [readyHead]
	test	ax, ax
	je	L_yakc_22
	; >>>>> Line:	109
	; >>>>> YKRunFlag = 1; 
	mov	word [YKRunFlag], 1
	; >>>>> Line:	110
	; >>>>> YKrestore = readyHead->taskSP; 
	mov	si, word [readyHead]
	mov	ax, word [si]
	mov	word [YKrestore], ax
	; >>>>> Line:	111
	; >>>>> YKRunningTask = readyHead; 
	mov	ax, word [readyHead]
	mov	word [YKRunningTask], ax
	; >>>>> Line:	112
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	113
	; >>>>> YKDispatcher(0); 
	xor	ax, ax
	push	ax
	call	YKDispatcher
	add	sp, 2
	jmp	L_yakc_23
L_yakc_22:
	; >>>>> Line:	116
	; >>>>> printString("YKRun Failed: readyHead is Null"); 
	mov	ax, L_yakc_19
	push	ax
	call	printString
	add	sp, 2
L_yakc_23:
	mov	sp, bp
	pop	bp
	ret
L_yakc_20:
	push	bp
	mov	bp, sp
	jmp	L_yakc_21
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	121
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakc_25
L_yakc_26:
	; >>>>> Line:	123
	; >>>>> if (count != 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_27
	; >>>>> Line:	124
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	125
	; >>>>> item = YKRunningTask; 
	mov	ax, word [YKRunningTask]
	mov	word [bp-2], ax
	; >>>>> Line:	126
	; >>>>> item->taskDelay = count; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	127
	; >>>>> spatcher(saveCont 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	128
	; >>>>> YKInsertBlocked(item); 
	push	word [bp-2]
	call	YKInsertBlocked
	add	sp, 2
	; >>>>> Line:	130
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_27:
	mov	sp, bp
	pop	bp
	ret
L_yakc_25:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_26
	ALIGN	2
YKExitISR:
	; >>>>> Line:	135
	; >>>>> void YKExitISR(void){ 
	jmp	L_yakc_29
L_yakc_30:
	; >>>>> Line:	136
	; >>>>> YKIsrDepth--; 
	dec	word [YKIsrDepth]
	; >>>>> Line:	137
	; >>>>> if(YKIsrDepth == 0){ 
	mov	ax, word [YKIsrDepth]
	test	ax, ax
	jne	L_yakc_31
	; >>>>> Line:	138
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_31:
	mov	sp, bp
	pop	bp
	ret
L_yakc_29:
	push	bp
	mov	bp, sp
	jmp	L_yakc_30
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	142
	; >>>>> void YKEnterISR(void){ 
	jmp	L_yakc_33
L_yakc_34:
	; >>>>> Line:	143
	; >>>>> YKIsrDepth++; 
	inc	word [YKIsrDepth]
	; >>>>> Line:	144
	; >>>>> if (YKIsrDepth == 1){ 
	cmp	word [YKIsrDepth], 1
	jne	L_yakc_35
	; >>>>> Line:	145
	; >>>>> YKsave = (int*)&(YKRunningTask->taskSP); 
	mov	ax, word [YKRunningTask]
	mov	word [YKsave], ax
	; >>>>> Line:	146
	; >>>>> YKSaveSP(); 
	call	YKSaveSP
L_yakc_35:
	mov	sp, bp
	pop	bp
	ret
L_yakc_33:
	push	bp
	mov	bp, sp
	jmp	L_yakc_34
	ALIGN	2
YKScheduler:
	; >>>>> Line:	150
	; >>>>> void YKScheduler(int saveContext){ 
	jmp	L_yakc_37
L_yakc_38:
	; >>>>> Line:	151
	; >>>>> if (YKRunningTask != readyHead){ 
	mov	ax, word [readyHead]
	cmp	ax, word [YKRunningTask]
	je	L_yakc_39
	; >>>>> Line:	152
	; >>>>> YKsave = (int*)&(YKRunningTask->taskSP); 
	mov	ax, word [YKRunningTask]
	mov	word [YKsave], ax
	; >>>>> Line:	153
	; >>>>> YKrestore = readyHead->taskSP; 
	mov	si, word [readyHead]
	mov	ax, word [si]
	mov	word [YKrestore], ax
	; >>>>> Line:	154
	; >>>>> YKRunningTask = readyHead; 
	mov	ax, word [readyHead]
	mov	word [YKRunningTask], ax
	; >>>>> Line:	155
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	156
	; >>>>> YKDispatcher(saveCont 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_39:
	mov	sp, bp
	pop	bp
	ret
L_yakc_37:
	push	bp
	mov	bp, sp
	jmp	L_yakc_38
L_yakc_42:
	DB	0xA,0xD,0xA,0xD,0
L_yakc_41:
	DB	"TICK ",0
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	163
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_43
L_yakc_44:
	; >>>>> Line:	166
	; >>>>> printString("TICK "); 
	mov	ax, L_yakc_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	167
	; >>>>> printInt(YKTickCount); 
	push	word [YKTickCount]
	call	printInt
	add	sp, 2
	; >>>>> Line:	168
	; >>>>> printString("\n\r\n\r"); 
	mov	ax, L_yakc_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	169
	; >>>>> YKTickCount++; 
	inc	word [YKTickCount]
	; >>>>> Line:	170
	; >>>>> temp = blockedHead; 
	mov	ax, word [blockedHead]
	mov	word [bp-2], ax
	; >>>>> Line:	172
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_46
L_yakc_45:
	; >>>>> Line:	173
	; >>>>> temp_next = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	174
	; >>>>> (temp->taskDelay)--; 
	mov	si, word [bp-2]
	add	si, 4
	dec	word [si]
	; >>>>> Line:	175
	; >>>>> if (temp->taskDelay <= 0){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_48
	; >>>>> Line:	176
	; >>>>> YKRemoveBlocked(temp); 
	push	word [bp-2]
	call	YKRemoveBlocked
	add	sp, 2
	; >>>>> Line:	177
	; >>>>> YKInsertSorted(temp, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKInsertSorted
	add	sp, 4
L_yakc_48:
	; >>>>> Line:	179
	; >>>>> if (temp_next != 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_yakc_49
	; >>>>> Line:	180
	; >>>>> temp = temp_next; 
	mov	word [bp-2], ax
	jmp	L_yakc_50
L_yakc_49:
	; >>>>> Line:	182
	; >>>>> else break; 
	jmp	L_yakc_47
L_yakc_50:
L_yakc_46:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_45
L_yakc_47:
	mov	sp, bp
	pop	bp
	ret
L_yakc_43:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_44
L_yakc_55:
	DB	") IGNORED",0
L_yakc_54:
	DB	"KEYPRESS (",0
L_yakc_53:
	DB	"DELAY COMPLETE",0
L_yakc_52:
	DB	"DELAY KEY PRESSED",0
	ALIGN	2
YKKeypressHandler:
	; >>>>> Line:	186
	; >>>>> void YKKeypressHandler(void){ 
	jmp	L_yakc_56
L_yakc_57:
	; >>>>> Line:	189
	; >>>>> if (KeyBuffer=='d'){ 
	mov	word [bp-2], 0
	mov	word [bp-4], 0
	; >>>>> Line:	189
	; >>>>> if (KeyBuffer=='d'){ 
	cmp	word [KeyBuffer], 100
	jne	L_yakc_58
	; >>>>> Line:	190
	; >>>>>  
	call	printNewLine
	; >>>>> Line:	191
	; >>>>> printString("DELAY KEY PRESSED"); 
	mov	ax, L_yakc_52
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	192
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	193
	; >>>>> for (k=0; k<=5000; k++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_60
L_yakc_59:
	; >>>>> Line:	194
	; >>>>> m++; 
	inc	word [bp-4]
L_yakc_62:
	inc	word [bp-2]
L_yakc_60:
	cmp	word [bp-2], 5000
	jle	L_yakc_59
L_yakc_61:
	; >>>>> Line:	196
	; >>>>> printString("DELAY COMPLETE"); 
	mov	ax, L_yakc_53
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	197
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_yakc_63
L_yakc_58:
	; >>>>> Line:	199
	; >>>>> else if(KeyBuffer=='p'){ 
	cmp	word [KeyBuffer], 112
	jne	L_yakc_64
	; >>>>> Line:	200
	; >>>>> YKSemPost(NSemPtr); 
	push	word [NSemPtr]
	call	YKSemPost
	add	sp, 2
	jmp	L_yakc_65
L_yakc_64:
	; >>>>> Line:	204
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	205
	; >>>>> printString("KEYPRESS ("); 
	mov	ax, L_yakc_54
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	206
	; >>>>> printChar(KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	207
	; >>>>> printString(") IGNORED"); 
	mov	ax, L_yakc_55
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	208
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_65:
L_yakc_63:
	mov	sp, bp
	pop	bp
	ret
L_yakc_56:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_57
	ALIGN	2
YKResetHandler:
	; >>>>> Line:	212
	; >>>>> void YKResetHandler(){ 
	jmp	L_yakc_67
L_yakc_68:
	; >>>>> Line:	213
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_67:
	push	bp
	mov	bp, sp
	jmp	L_yakc_68
L_yakc_70:
	DB	"Error! Invalid semaphor value!",0xA,0xD,0
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	219
	; >>>>> YKSEM* YKSemCreate(int val){ 
	jmp	L_yakc_71
L_yakc_72:
	; >>>>> Line:	221
	; >>>>> if(val < 0){ 
	cmp	word [bp+4], 0
	jge	L_yakc_73
	; >>>>> Line:	222
	; >>>>> printString("Error! Invalid semaphor value!\n\r"); 
	mov	ax, L_yakc_70
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	223
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_74
L_yakc_73:
L_yakc_75:
	; >>>>> Line:	228
	; >>>>> sem = &YKSemaphors[semCount]; 
	mov	ax, word [semCount]
	mov	cx, 6
	imul	cx
	add	ax, YKSemaphors
	mov	word [bp-2], ax
	; >>>>> Line:	229
	; >>>>> sem->value = val; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	230
	; >>>>> sem->pendHead = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	231
	; >>>>> sem->string = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	232
	; >>>>> semCount++; 
	inc	word [semCount]
	; >>>>> Line:	233
	; >>>>> return sem; 
	mov	ax, word [bp-2]
L_yakc_74:
	mov	sp, bp
	pop	bp
	ret
L_yakc_71:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_72
	ALIGN	2
YKSemPend:
	; >>>>> Line:	236
	; >>>>> void YKSemPend(YKSEM* sem){ 
	jmp	L_yakc_77
L_yakc_78:
	; >>>>> Line:	237
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	239
	; >>>>> if((sem->value)-- > 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	word [si]
	test	ax, ax
	jle	L_yakc_79
	; >>>>> Line:	240
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	241
	; >>>>> return; 
	jmp	L_yakc_80
	jmp	L_yakc_81
L_yakc_79:
	; >>>>> Line:	244
	; >>>>> YKRemoveSorted(YKRunningTask, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [YKRunningTask]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	245
	; >>>>> YKInsertSorted(YKRunningTask, &(sem->pendHead)); 
	mov	ax, word [bp+4]
	add	ax, 4
	push	ax
	push	word [YKRunningTask]
	call	YKInsertSorted
	add	sp, 4
	; >>>>> Line:	246
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	247
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_81:
	; >>>>> Line:	248
	; >>>>> return; 
L_yakc_80:
	mov	sp, bp
	pop	bp
	ret
L_yakc_77:
	push	bp
	mov	bp, sp
	jmp	L_yakc_78
	ALIGN	2
YKSemPost:
	; >>>>> Line:	252
	; >>>>> void YKSemPost(YKSEM* sem){ 
	jmp	L_yakc_83
L_yakc_84:
	; >>>>> Line:	254
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	256
	; >>>>> if((sem->value)++ >= 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	word [si]
	test	ax, ax
	jl	L_yakc_85
	; >>>>> Line:	257
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	258
	; >>>>> return; 
	jmp	L_yakc_86
	jmp	L_yakc_87
L_yakc_85:
	; >>>>> Line:	261
	; >>>>> pending_task = (sem->pendHead); 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	262
	; >>>>> YKRemoveSorted(pending_task, &(sem->pendHead)); 
	mov	ax, word [bp+4]
	add	ax, 4
	push	ax
	push	word [bp-2]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	263
	; >>>>> YKInsertSorted(pending_task, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKInsertSorted
	add	sp, 4
	; >>>>> Line:	264
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_87:
	; >>>>> Line:	265
	; >>>>> return; 
L_yakc_86:
	mov	sp, bp
	pop	bp
	ret
L_yakc_83:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_84
	ALIGN	2
YKInsertSorted:
	; >>>>> Line:	271
	; >>>>> void YKInsertSorted(struct Task* item, struct Task** head){ 
	jmp	L_yakc_89
L_yakc_90:
	; >>>>> Line:	274
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_91
	; >>>>> Line:	276
	; >>>>> if (*head == 0){ 
	mov	si, word [bp+6]
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_92
	; >>>>> Line:	277
	; >>>>> *head = item; 
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	279
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	280
	; >>>>> item->prev = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_93
L_yakc_92:
	; >>>>> Line:	284
	; >>>>> temp = *head; 
	mov	si, word [bp+6]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	285
	; >>>>> temp_prev = *head; 
	mov	si, word [bp+6]
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	286
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_95
L_yakc_94:
	; >>>>> Line:	288
	; >>>>> if ((temp->taskPriority) > (item->taskPriority)){ 
	mov	si, word [bp-2]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 2
	mov	al, byte [di]
	cmp	al, byte [si]
	jae	L_yakc_97
	; >>>>> Line:	290
	; >>>>> if (temp- 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_98
	; >>>>> Line:	291
	; >>>>> item->next = temp; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	292
	; >>>>> *head = item; 
	mov	si, word [bp+6]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	293
	; >>>>> temp->prev = item; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	294
	; >>>>> item->prev = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_99
L_yakc_98:
	; >>>>> Line:	298
	; >>>>> (temp->prev)->next = item; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	299
	; >>>>> item->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	300
	; >>>>> temp->prev = item; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	301
	; >>>>> item->next = temp; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_99:
	; >>>>> Line:	303
	; >>>>> return; 
	jmp	L_yakc_100
L_yakc_97:
	; >>>>> Line:	305
	; >>>>> temp_prev = temp; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	306
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_95:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_94
L_yakc_96:
	; >>>>> Line:	309
	; >>>>> temp_prev->next = item; 
	mov	si, word [bp-4]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	310
	; >>>>> item->prev = temp_prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	312
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_93:
L_yakc_91:
L_yakc_100:
	mov	sp, bp
	pop	bp
	ret
L_yakc_89:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_90
	ALIGN	2
YKRemoveSorted:
	; >>>>> Line:	317
	; >>>>> void YKRemoveSorted (struct Task* item, struct Task** head){ 
	jmp	L_yakc_102
L_yakc_103:
	; >>>>> Line:	318
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_104
	; >>>>> Line:	319
	; >>>>> if (item->prev != 0) { 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_105
	; >>>>> Line:	320
	; >>>>> (item-> 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 8
	mov	di, word [di]
	add	di, 6
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_106
L_yakc_105:
	; >>>>> Line:	323
	; >>>>> *head = item->next; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+6]
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_106:
	; >>>>> Line:	325
	; >>>>> if (item->next != 0) { 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_107
	; >>>>> Line:	326
	; >>>>> (item->next)->prev = item->prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 6
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_107:
L_yakc_108:
L_yakc_104:
	; >>>>> Line:	330
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_102:
	push	bp
	mov	bp, sp
	jmp	L_yakc_103
	ALIGN	2
YKInsertBlocked:
	; >>>>> Line:	334
	; >>>>> void YKInsertBlocked(struct Task* item){ 
	jmp	L_yakc_110
L_yakc_111:
	; >>>>> Line:	335
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_112
	; >>>>> Line:	336
	; >>>>> if (blockedTail == 0){ 
	mov	ax, word [blockedTail]
	test	ax, ax
	jne	L_yakc_113
	; >>>>> Line:	337
	; >>>>> blockedHead = item; 
	mov	ax, word [bp+4]
	mov	word [blockedHead], ax
	; >>>>> Line:	338
	; >>>>> blockedTail = item; 
	mov	word [blockedTail], ax
	; >>>>> Line:	339
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	340
	; >>>>> item->prev = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_114
L_yakc_113:
	; >>>>> Line:	343
	; >>>>> blockedTail->next = item; 
	mov	si, word [blockedTail]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	344
	; >>>>> item->prev = blockedTail; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [blockedTail]
	mov	word [si], ax
	; >>>>> Line:	345
	; >>>>> blockedTail = item; 
	mov	ax, word [bp+4]
	mov	word [blockedTail], ax
	; >>>>> Line:	346
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_114:
L_yakc_112:
	mov	sp, bp
	pop	bp
	ret
L_yakc_110:
	push	bp
	mov	bp, sp
	jmp	L_yakc_111
	ALIGN	2
YKRemoveBlocked:
	; >>>>> Line:	351
	; >>>>> void YKRemoveBlocked(struct Task* item){ 
	jmp	L_yakc_116
L_yakc_117:
	; >>>>> Line:	352
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_118
	; >>>>> Line:	353
	; >>>>> if (item- 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_119
	; >>>>> Line:	354
	; >>>>> (item->prev)->next = item->next; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 8
	mov	di, word [di]
	add	di, 6
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_120
L_yakc_119:
	; >>>>> Line:	357
	; >>>>> blockedHead = item->next; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	mov	word [blockedHead], ax
L_yakc_120:
	; >>>>> Line:	359
	; >>>>> if (item->next != 0) { 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_121
	; >>>>> Line:	360
	; >>>>> (item->next)->prev = item->prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 6
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_122
L_yakc_121:
	; >>>>> Line:	363
	; >>>>> blockedTail = item->prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [blockedTail], ax
L_yakc_122:
L_yakc_118:
	mov	sp, bp
	pop	bp
	ret
L_yakc_116:
	push	bp
	mov	bp, sp
	jmp	L_yakc_117
L_yakc_127:
	DB	0xA,0xD,"PrintStack: item is NULL",0
L_yakc_126:
	DB	"]",0xA,0xD,0
L_yakc_125:
	DB	": [",0
L_yakc_124:
	DB	0xA,0xD,"Printing Stack:",0xA,0xD,0
	ALIGN	2
printStack:
	; >>>>> Line:	371
	; >>>>> void printStack(struct Task* item){ 
	jmp	L_yakc_128
L_yakc_129:
	; >>>>> Line:	374
	; >>>>> k = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	375
	; >>>>> if (item != 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_130
	; >>>>> Line:	376
	; >>>>> tempSP = item->taskSP; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	377
	; >>>>> printString("\n\rPrinting Stack:\n\r"); 
	mov	ax, L_yakc_124
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	378
	; >>>>> for (k; k<12; k++){ 
	jmp	L_yakc_132
L_yakc_131:
	; >>>>> Line:	379
	; >>>>> printWord((int)tempSP); 
	push	word [bp-4]
	call	printWord
	add	sp, 2
	; >>>>> Line:	380
	; >>>>> printString(": ["); 
	mov	ax, L_yakc_125
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	381
	; >>>>> printWord(*tempSP); 
	mov	si, word [bp-4]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	382
	; >>>>> printString("]\n\r"); 
	mov	ax, L_yakc_126
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	383
	; >>>>> tempSP = tempSP+1; 
	mov	ax, word [bp-4]
	add	ax, 2
	mov	word [bp-4], ax
L_yakc_134:
	inc	word [bp-2]
L_yakc_132:
	cmp	word [bp-2], 12
	jl	L_yakc_131
L_yakc_133:
	jmp	L_yakc_135
L_yakc_130:
	; >>>>> Line:	387
	; >>>>> printString("\n\rPrintStack: item is NULL"); 
	mov	ax, L_yakc_127
	push	ax
	call	printString
	add	sp, 2
L_yakc_135:
	mov	sp, bp
	pop	bp
	ret
L_yakc_128:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_129
L_yakc_141:
	DB	"Blocked List:",0xA,0xD,0
L_yakc_140:
	DB	"] ",0
L_yakc_139:
	DB	", ",0
L_yakc_138:
	DB	"[0x",0
L_yakc_137:
	DB	0xA,0xD,"Ready List:",0xA,0xD,0
	ALIGN	2
printLists:
	; >>>>> Line:	392
	; >>>>> void printLists(void){ 
	jmp	L_yakc_142
L_yakc_143:
	; >>>>> Line:	394
	; >>>>> printString("\n\rReady List:\n\r"); 
	mov	ax, L_yakc_137
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	395
	; >>>>> temp = readyHead; 
	mov	ax, word [readyHead]
	mov	word [bp-2], ax
	; >>>>> Line:	396
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_145
L_yakc_144:
	; >>>>> Line:	397
	; >>>>> printString("[0x"); 
	mov	ax, L_yakc_138
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	398
	; >>>>> printByte(temp->taskPriority); 
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	399
	; >>>>> printString(", "); 
	mov	ax, L_yakc_139
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	400
	; >>>>> printWord(temp->taskDelay); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	401
	; >>>>> printString(", "); 
	mov	ax, L_yakc_139
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	402
	; >>>>> printWord((int)temp->taskSP); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	403
	; >>>>> printString("] "); 
	mov	ax, L_yakc_140
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	404
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_145:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_144
L_yakc_146:
	; >>>>> Line:	406
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	407
	; >>>>> temp = blockedHead; 
	mov	ax, word [blockedHead]
	mov	word [bp-2], ax
	; >>>>> Line:	408
	; >>>>> printString("Blocked List:\n\r"); 
	mov	ax, L_yakc_141
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	409
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_148
L_yakc_147:
	; >>>>> Line:	410
	; >>>>> printString("[0x"); 
	mov	ax, L_yakc_138
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	411
	; >>>>> printByte(tem 
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	412
	; >>>>> printString(", "); 
	mov	ax, L_yakc_139
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	413
	; >>>>> printWord(temp->taskDelay); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	414
	; >>>>> printString(", "); 
	mov	ax, L_yakc_139
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	415
	; >>>>> printWord((int)temp->taskSP); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	416
	; >>>>> printString("] "); 
	mov	ax, L_yakc_140
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	417
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_148:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_147
L_yakc_149:
	; >>>>> Line:	419
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_42+2)
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_142:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_143
	ALIGN	2
YKTickCount:
	TIMES	2 db 0
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKsave:
	TIMES	2 db 0
YKrestore:
	TIMES	2 db 0
YKtaskCount:
	TIMES	2 db 0
YKRunFlag:
	TIMES	2 db 0
YKIsrDepth:
	TIMES	2 db 0
YKIdleVar:
	TIMES	2 db 0
readyHead:
	TIMES	2 db 0
readyTail:
	TIMES	2 db 0
blockedHead:
	TIMES	2 db 0
blockedTail:
	TIMES	2 db 0
YKRunningTask:
	TIMES	2 db 0
pendHead:
	TIMES	2 db 0
pendTail:
	TIMES	2 db 0
YKTasks:
	TIMES	40 db 0
YKIdleStk:
	TIMES	512 db 0
YKSemaphors:
	TIMES	60 db 0
semCount:
	TIMES	2 db 0
