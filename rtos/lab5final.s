        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      isr_reset ; Reset               ; Int 08h (IRQ 0)
        dd      isr_tick ; Tick                ; Int 09h (IRQ 1)
        dd      isr_keypress ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

isr_reset:
	call YKResetHandler

isr_keypress:
	push	bp
	push	si
	push	di
	push	ds
	push	es
	push	dx
	push	cx
	push	bx
	push	ax
	call	YKEnterISR
	sti
	call	YKKeypressHandler
	cli
	call 	signalEOI ; tell the PIC that we're done with the ISR
	call	YKExitISR	
	pop	ax
	pop	bx
	pop	cx
	pop	dx
	pop	es
	pop	ds
	pop	di
	pop	si
	pop	bp	
	iret

isr_tick:
	push	bp
	push	si	
	push	di
	push	ds
	push	es
	push	dx
	push	cx
	push	bx
	push	ax
	call	YKEnterISR
	;sti tick should never be interrupted
	call	YKTickHandler
	cli
	call 	signalEOI ; tell the PIC that we're done with the ISR
	call	YKExitISR	
	pop	ax
	pop	bx
	pop	cx
	pop	dx
	pop	es
	pop	ds
	pop	di
	pop	si
	pop	bp	
	iret

YKEnterMutex:
	cli
	ret
YKExitMutex:
	sti
	ret
YKSavecontext:
	pushf
	push	bx
	add		sp, 2
	mov		bx, sp
	or		word[bx], 0x0200
	sub		sp, 2
	pop		bx
	push	cs
	push	word[bp+2]
	push	word[bp]
	push	si
	push	di
	push	ds
	push	es
	push	dx
	push	cx
	push	bx
	push	ax
	mov		bx, [YKsave]
	mov		[bx], sp
	jmp		YKRestoreContext
YKDispatcher:
	push	bp
	mov		bp, sp
	push	ax
	mov		ax, [bp+4]
	cmp		ax, 1
	pop		ax
	je		YKSavecontext
YKRestoreContext:
	mov		sp, [YKrestore]
	pop		ax
	pop		bx
	pop		cx
	pop		dx
	pop		es
	pop		ds
	pop		di
	pop		si
	pop		bp	
	iret
YKSaveSP:
	push 	bp
	mov 	bp, sp
	add		sp, 8
	mov 	bx, [YKsave]
	mov 	[bx], sp
	sub		sp, 8
	mov 	sp, bp
	pop		bp
	ret
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	40
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	41
	; >>>>> while(1){ 
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	42
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	43
	; >>>>> if(YKIdleVar){ 
	mov	ax, word [YKIdleVar]
	test	ax, ax
	je	L_yakc_6
	; >>>>> Line:	44
	; >>>>> YKIdleVar++; 
	inc	word [YKIdleVar]
L_yakc_6:
L_yakc_4:
	jmp	L_yakc_3
L_yakc_5:
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	jmp	L_yakc_2
	ALIGN	2
YKInitialize:
	; >>>>> Line:	49
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	50
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	51
	; >>>>> YKsave = 0; 
	mov	word [YKsave], 0
	; >>>>> Line:	52
	; >>>>> YKrestore = 0; 
	mov	word [YKrestore], 0
	; >>>>> Line:	53
	; >>>>> YKTickCount = 0; 
	mov	word [YKTickCount], 0
	; >>>>> Line:	54
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	55
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	56
	; >>>>> YKRunFlag = 0; 
	mov	word [YKRunFlag], 0
	; >>>>> Line:	57
	; >>>>> YKtaskCount = 0; 
	mov	word [YKtaskCount], 0
	; >>>>> Line:	58
	; >>>>> readyHead = 0; 
	mov	word [readyHead], 0
	; >>>>> Line:	59
	; >>>>> readyTail = 0; 
	mov	word [readyTail], 0
	; >>>>> Line:	60
	; >>>>> blockedHead = 0; 
	mov	word [blockedHead], 0
	; >>>>> Line:	61
	; >>>>> blockedTail = 0; 
	mov	word [blockedTail], 0
	; >>>>> Line:	62
	; >>>>> YKRunningTask = 0; 
	mov	word [YKRunningTask], 0
	; >>>>> Line:	63
	; >>>>> YKIsrDepth = 0; 
	mov	word [YKIsrDepth], 0
	; >>>>> Line:	64
	; >>>>> semCount = 0; 
	mov	word [semCount], 0
	; >>>>> Line:	65
	; >>>>> YKNewTask(&YKIdleTask, &YKIdleStk[256], 1 
	mov	al, 100
	push	ax
	mov	ax, (YKIdleStk+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKNewTask:
	; >>>>> Line:	68
	; >>>>> void YKNewTask(void (*task)(void), int *taskStack, unsigned char priority){ 
	jmp	L_yakc_11
L_yakc_12:
	; >>>>> Line:	72
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	74
	; >>>>> tempSP = taskStack-1; 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	word [bp-4], ax
	; >>>>> Line:	75
	; >>>>> *tempSP = 0x0200; 
	mov	si, word [bp-4]
	mov	word [si], 512
	; >>>>> Line:	76
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	77
	; >>>>> *tempSP = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	78
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	79
	; >>>>> *tempSP = (int)task; 
	mov	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	80
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	81
	; >>>>> *tempSP = (int)(taskStack-1); 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	si, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	82
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	84
	; >>>>> for(k = 0; k <=7; k++){ 
	mov	word [bp-6], 0
	jmp	L_yakc_14
L_yakc_13:
	; >>>>> Line:	85
	; >>>>> *tempSP = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	86
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
L_yakc_16:
	inc	word [bp-6]
L_yakc_14:
	cmp	word [bp-6], 7
	jle	L_yakc_13
L_yakc_15:
	; >>>>> Line:	90
	; >>>>> tempTask = &YKTasks[YKtaskCount]; 
	mov	ax, word [YKtaskCount]
	mov	cx, 10
	imul	cx
	add	ax, YKTasks
	mov	word [bp-2], ax
	; >>>>> Line:	91
	; >>>>> tempTask->taskSP = tempSP+1; 
	mov	ax, word [bp-4]
	add	ax, 2
	mov	si, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	92
	; >>>>> tempTask->taskPriority = priority; 
	mov	si, word [bp-2]
	add	si, 2
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	93
	; >>>>> tempTask->taskDelay = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	95
	; >>>>> YKtaskCount++; 
	inc	word [YKtaskCount]
	; >>>>> Line:	97
	; >>>>>  
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKInsertSorted
	add	sp, 4
	; >>>>> Line:	98
	; >>>>> printStack(tempTask); 
	push	word [bp-2]
	call	printStack
	add	sp, 2
	; >>>>> Line:	99
	; >>>>> printLists(); 
	call	printLists
	; >>>>> Line:	100
	; >>>>> if (YKRunFlag == 1){ 
	cmp	word [YKRunFlag], 1
	jne	L_yakc_17
	; >>>>> Line:	101
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	102
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_17:
	mov	sp, bp
	pop	bp
	ret
L_yakc_11:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_12
L_yakc_19:
	DB	"YKRun Failed: readyHead is Null",0
	ALIGN	2
YKRun:
	; >>>>> Line:	107
	; >>>>> void YKRun(void) { 
	jmp	L_yakc_20
L_yakc_21:
	; >>>>> Line:	108
	; >>>>> if (readyHead != 0){ 
	mov	ax, word [readyHead]
	test	ax, ax
	je	L_yakc_22
	; >>>>> Line:	109
	; >>>>> YKRunFlag = 1; 
	mov	word [YKRunFlag], 1
	; >>>>> Line:	110
	; >>>>> YKrestore = readyHead->taskSP; 
	mov	si, word [readyHead]
	mov	ax, word [si]
	mov	word [YKrestore], ax
	; >>>>> Line:	111
	; >>>>> YKRunningTask = readyHead; 
	mov	ax, word [readyHead]
	mov	word [YKRunningTask], ax
	; >>>>> Line:	112
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	113
	; >>>>> YKDispatcher(0); 
	xor	ax, ax
	push	ax
	call	YKDispatcher
	add	sp, 2
	jmp	L_yakc_23
L_yakc_22:
	; >>>>> Line:	116
	; >>>>> printString("YKRun Failed: readyHead is Null"); 
	mov	ax, L_yakc_19
	push	ax
	call	printString
	add	sp, 2
L_yakc_23:
	mov	sp, bp
	pop	bp
	ret
L_yakc_20:
	push	bp
	mov	bp, sp
	jmp	L_yakc_21
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	121
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakc_25
L_yakc_26:
	; >>>>> Line:	123
	; >>>>> if (count != 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_27
	; >>>>> Line:	124
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	125
	; >>>>> item = YKRunningTask; 
	mov	ax, word [YKRunningTask]
	mov	word [bp-2], ax
	; >>>>> Line:	126
	; >>>>> item->taskDelay = count; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	127
	; >>>>> spatcher(saveCont 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	128
	; >>>>> YKInsertBlocked(item); 
	push	word [bp-2]
	call	YKInsertBlocked
	add	sp, 2
	; >>>>> Line:	130
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_27:
	mov	sp, bp
	pop	bp
	ret
L_yakc_25:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_26
	ALIGN	2
YKExitISR:
	; >>>>> Line:	135
	; >>>>> void YKExitISR(void){ 
	jmp	L_yakc_29
L_yakc_30:
	; >>>>> Line:	136
	; >>>>> YKIsrDepth--; 
	dec	word [YKIsrDepth]
	; >>>>> Line:	137
	; >>>>> if(YKIsrDepth == 0){ 
	mov	ax, word [YKIsrDepth]
	test	ax, ax
	jne	L_yakc_31
	; >>>>> Line:	138
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_31:
	mov	sp, bp
	pop	bp
	ret
L_yakc_29:
	push	bp
	mov	bp, sp
	jmp	L_yakc_30
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	142
	; >>>>> void YKEnterISR(void){ 
	jmp	L_yakc_33
L_yakc_34:
	; >>>>> Line:	143
	; >>>>> YKIsrDepth++; 
	inc	word [YKIsrDepth]
	; >>>>> Line:	144
	; >>>>> if (YKIsrDepth == 1){ 
	cmp	word [YKIsrDepth], 1
	jne	L_yakc_35
	; >>>>> Line:	145
	; >>>>> YKsave = (int*)&(YKRunningTask->taskSP); 
	mov	ax, word [YKRunningTask]
	mov	word [YKsave], ax
	; >>>>> Line:	146
	; >>>>> YKSaveSP(); 
	call	YKSaveSP
L_yakc_35:
	mov	sp, bp
	pop	bp
	ret
L_yakc_33:
	push	bp
	mov	bp, sp
	jmp	L_yakc_34
	ALIGN	2
YKScheduler:
	; >>>>> Line:	150
	; >>>>> void YKScheduler(int saveContext){ 
	jmp	L_yakc_37
L_yakc_38:
	; >>>>> Line:	151
	; >>>>> if (YKRunningTask != readyHead){ 
	mov	ax, word [readyHead]
	cmp	ax, word [YKRunningTask]
	je	L_yakc_39
	; >>>>> Line:	152
	; >>>>> YKsave = (int*)&(YKRunningTask->taskSP); 
	mov	ax, word [YKRunningTask]
	mov	word [YKsave], ax
	; >>>>> Line:	153
	; >>>>> YKrestore = readyHead->taskSP; 
	mov	si, word [readyHead]
	mov	ax, word [si]
	mov	word [YKrestore], ax
	; >>>>> Line:	154
	; >>>>> YKRunningTask = readyHead; 
	mov	ax, word [readyHead]
	mov	word [YKRunningTask], ax
	; >>>>> Line:	155
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	156
	; >>>>> YKDispatcher(saveCont 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_39:
	mov	sp, bp
	pop	bp
	ret
L_yakc_37:
	push	bp
	mov	bp, sp
	jmp	L_yakc_38
L_yakc_42:
	DB	0xA,0xD,0xA,0xD,0
L_yakc_41:
	DB	"TICK ",0
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	163
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_43
L_yakc_44:
	; >>>>> Line:	166
	; >>>>> printString("TICK "); 
	mov	ax, L_yakc_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	167
	; >>>>> printInt(YKTickCount); 
	push	word [YKTickCount]
	call	printInt
	add	sp, 2
	; >>>>> Line:	168
	; >>>>> printString("\n\r\n\r"); 
	mov	ax, L_yakc_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	169
	; >>>>> YKTickCount++; 
	inc	word [YKTickCount]
	; >>>>> Line:	170
	; >>>>> temp = blockedHead; 
	mov	ax, word [blockedHead]
	mov	word [bp-2], ax
	; >>>>> Line:	172
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_46
L_yakc_45:
	; >>>>> Line:	173
	; >>>>> temp_next = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	174
	; >>>>> (temp->taskDelay)--; 
	mov	si, word [bp-2]
	add	si, 4
	dec	word [si]
	; >>>>> Line:	175
	; >>>>> if (temp->taskDelay <= 0){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_48
	; >>>>> Line:	176
	; >>>>> YKRemoveBlocked(temp); 
	push	word [bp-2]
	call	YKRemoveBlocked
	add	sp, 2
	; >>>>> Line:	177
	; >>>>> YKInsertSorted(temp, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKInsertSorted
	add	sp, 4
L_yakc_48:
	; >>>>> Line:	179
	; >>>>> if (temp_next != 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_yakc_49
	; >>>>> Line:	180
	; >>>>> temp = temp_next; 
	mov	word [bp-2], ax
	jmp	L_yakc_50
L_yakc_49:
	; >>>>> Line:	182
	; >>>>> else break; 
	jmp	L_yakc_47
L_yakc_50:
L_yakc_46:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_45
L_yakc_47:
	mov	sp, bp
	pop	bp
	ret
L_yakc_43:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_44
L_yakc_55:
	DB	") IGNORED",0
L_yakc_54:
	DB	"KEYPRESS (",0
L_yakc_53:
	DB	"DELAY COMPLETE",0
L_yakc_52:
	DB	"DELAY KEY PRESSED",0
	ALIGN	2
YKKeypressHandler:
	; >>>>> Line:	186
	; >>>>> void YKKeypressHandler(void){ 
	jmp	L_yakc_56
L_yakc_57:
	; >>>>> Line:	189
	; >>>>> if (KeyBuffer=='d'){ 
	mov	word [bp-2], 0
	mov	word [bp-4], 0
	; >>>>> Line:	189
	; >>>>> if (KeyBuffer=='d'){ 
	cmp	word [KeyBuffer], 100
	jne	L_yakc_58
	; >>>>> Line:	190
	; >>>>>  
	call	printNewLine
	; >>>>> Line:	191
	; >>>>> printString("DELAY KEY PRESSED"); 
	mov	ax, L_yakc_52
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	192
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	193
	; >>>>> for (k=0; k<=5000; k++){ 
	mov	word [bp-2], 0
	jmp	L_yakc_60
L_yakc_59:
	; >>>>> Line:	194
	; >>>>> m++; 
	inc	word [bp-4]
L_yakc_62:
	inc	word [bp-2]
L_yakc_60:
	cmp	word [bp-2], 5000
	jle	L_yakc_59
L_yakc_61:
	; >>>>> Line:	196
	; >>>>> printString("DELAY COMPLETE"); 
	mov	ax, L_yakc_53
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	197
	; >>>>> printNewLine(); 
	call	printNewLine
	jmp	L_yakc_63
L_yakc_58:
	; >>>>> Line:	199
	; >>>>> else if(KeyBuffer=='p'){ 
	cmp	word [KeyBuffer], 112
	jne	L_yakc_64
	; >>>>> Line:	200
	; >>>>> YKSemPost(NSemPtr); 
	push	word [NSemPtr]
	call	YKSemPost
	add	sp, 2
	jmp	L_yakc_65
L_yakc_64:
	; >>>>> Line:	204
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	205
	; >>>>> printString("KEYPRESS ("); 
	mov	ax, L_yakc_54
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	206
	; >>>>> printChar(KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	207
	; >>>>> printString(") IGNORED"); 
	mov	ax, L_yakc_55
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	208
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_65:
L_yakc_63:
	mov	sp, bp
	pop	bp
	ret
L_yakc_56:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_57
	ALIGN	2
YKResetHandler:
	; >>>>> Line:	212
	; >>>>> void YKResetHandler(){ 
	jmp	L_yakc_67
L_yakc_68:
	; >>>>> Line:	213
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_67:
	push	bp
	mov	bp, sp
	jmp	L_yakc_68
L_yakc_70:
	DB	"Error! Invalid semaphor value!",0xA,0xD,0
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	219
	; >>>>> YKSEM* YKSemCreate(int val){ 
	jmp	L_yakc_71
L_yakc_72:
	; >>>>> Line:	221
	; >>>>> if(val < 0){ 
	cmp	word [bp+4], 0
	jge	L_yakc_73
	; >>>>> Line:	222
	; >>>>> printString("Error! Invalid semaphor value!\n\r"); 
	mov	ax, L_yakc_70
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	223
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_74
L_yakc_73:
L_yakc_75:
	; >>>>> Line:	228
	; >>>>> sem = &YKSemaphors[semCount]; 
	mov	ax, word [semCount]
	mov	cx, 6
	imul	cx
	add	ax, YKSemaphors
	mov	word [bp-2], ax
	; >>>>> Line:	229
	; >>>>> sem->value = val; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	230
	; >>>>> sem->pendHead = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	231
	; >>>>> sem->string = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	232
	; >>>>> semCount++; 
	inc	word [semCount]
	; >>>>> Line:	233
	; >>>>> return sem; 
	mov	ax, word [bp-2]
L_yakc_74:
	mov	sp, bp
	pop	bp
	ret
L_yakc_71:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_72
	ALIGN	2
YKSemPend:
	; >>>>> Line:	236
	; >>>>> void YKSemPend(YKSEM* sem){ 
	jmp	L_yakc_77
L_yakc_78:
	; >>>>> Line:	237
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	239
	; >>>>> if((sem->value)-- > 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	word [si]
	test	ax, ax
	jle	L_yakc_79
	; >>>>> Line:	240
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	241
	; >>>>> return; 
	jmp	L_yakc_80
	jmp	L_yakc_81
L_yakc_79:
	; >>>>> Line:	244
	; >>>>> YKRemoveSorted(YKRunningTask, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [YKRunningTask]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	245
	; >>>>> YKInsertSorted(YKRunningTask, &(sem->pendHead)); 
	mov	ax, word [bp+4]
	add	ax, 4
	push	ax
	push	word [YKRunningTask]
	call	YKInsertSorted
	add	sp, 4
	; >>>>> Line:	246
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	247
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_81:
	; >>>>> Line:	248
	; >>>>> return; 
L_yakc_80:
	mov	sp, bp
	pop	bp
	ret
L_yakc_77:
	push	bp
	mov	bp, sp
	jmp	L_yakc_78
	ALIGN	2
YKSemPost:
	; >>>>> Line:	252
	; >>>>> void YKSemPost(YKSEM* sem){ 
	jmp	L_yakc_83
L_yakc_84:
	; >>>>> Line:	254
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	256
	; >>>>> if((sem->value)++ >= 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	word [si]
	test	ax, ax
	jl	L_yakc_85
	; >>>>> Line:	257
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	258
	; >>>>> return; 
	jmp	L_yakc_86
	jmp	L_yakc_87
L_yakc_85:
	; >>>>> Line:	261
	; >>>>> pending_task = (sem->pendHead); 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	262
	; >>>>> YKRemoveSorted(pending_task, &(sem->pendHead)); 
	mov	ax, word [bp+4]
	add	ax, 4
	push	ax
	push	word [bp-2]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	263
	; >>>>> YKInsertSorted(pending_task, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKInsertSorted
	add	sp, 4
	; >>>>> Line:	264
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_87:
	; >>>>> Line:	265
	; >>>>> return; 
L_yakc_86:
	mov	sp, bp
	pop	bp
	ret
L_yakc_83:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_84
	ALIGN	2
YKInsertSorted:
	; >>>>> Line:	271
	; >>>>> void YKInsertSorted(struct Task* item, struct Task** head){ 
	jmp	L_yakc_89
L_yakc_90:
	; >>>>> Line:	274
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_91
	; >>>>> Line:	276
	; >>>>> if (*head == 0){ 
	mov	si, word [bp+6]
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_92
	; >>>>> Line:	277
	; >>>>> *head = item; 
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	279
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	280
	; >>>>> item->prev = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_93
L_yakc_92:
	; >>>>> Line:	284
	; >>>>> temp = *head; 
	mov	si, word [bp+6]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	285
	; >>>>> temp_prev = *head; 
	mov	si, word [bp+6]
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	286
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_95
L_yakc_94:
	; >>>>> Line:	288
	; >>>>> if ((temp->taskPriority) > (item->taskPriority)){ 
	mov	si, word [bp-2]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 2
	mov	al, byte [di]
	cmp	al, byte [si]
	jae	L_yakc_97
	; >>>>> Line:	290
	; >>>>> if (temp- 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_98
	; >>>>> Line:	291
	; >>>>> item->next = temp; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	292
	; >>>>> *head = item; 
	mov	si, word [bp+6]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	293
	; >>>>> temp->prev = item; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	294
	; >>>>> item->prev = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_99
L_yakc_98:
	; >>>>> Line:	298
	; >>>>> (temp->prev)->next = item; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	299
	; >>>>> item->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	300
	; >>>>> temp->prev = item; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	301
	; >>>>> item->next = temp; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_99:
	; >>>>> Line:	303
	; >>>>> return; 
	jmp	L_yakc_100
L_yakc_97:
	; >>>>> Line:	305
	; >>>>> temp_prev = temp; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	306
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_95:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_94
L_yakc_96:
	; >>>>> Line:	309
	; >>>>> temp_prev->next = item; 
	mov	si, word [bp-4]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	310
	; >>>>> item->prev = temp_prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	312
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_93:
L_yakc_91:
L_yakc_100:
	mov	sp, bp
	pop	bp
	ret
L_yakc_89:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_90
	ALIGN	2
YKRemoveSorted:
	; >>>>> Line:	317
	; >>>>> void YKRemoveSorted (struct Task* item, struct Task** head){ 
	jmp	L_yakc_102
L_yakc_103:
	; >>>>> Line:	318
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_104
	; >>>>> Line:	319
	; >>>>> if (item->prev != 0) { 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_105
	; >>>>> Line:	320
	; >>>>> (item-> 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 8
	mov	di, word [di]
	add	di, 6
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_106
L_yakc_105:
	; >>>>> Line:	323
	; >>>>> *head = item->next; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+6]
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_106:
	; >>>>> Line:	325
	; >>>>> if (item->next != 0) { 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_107
	; >>>>> Line:	326
	; >>>>> (item->next)->prev = item->prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 6
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_107:
L_yakc_108:
L_yakc_104:
	; >>>>> Line:	330
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_102:
	push	bp
	mov	bp, sp
	jmp	L_yakc_103
	ALIGN	2
YKInsertBlocked:
	; >>>>> Line:	334
	; >>>>> void YKInsertBlocked(struct Task* item){ 
	jmp	L_yakc_110
L_yakc_111:
	; >>>>> Line:	335
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_112
	; >>>>> Line:	336
	; >>>>> if (blockedTail == 0){ 
	mov	ax, word [blockedTail]
	test	ax, ax
	jne	L_yakc_113
	; >>>>> Line:	337
	; >>>>> blockedHead = item; 
	mov	ax, word [bp+4]
	mov	word [blockedHead], ax
	; >>>>> Line:	338
	; >>>>> blockedTail = item; 
	mov	word [blockedTail], ax
	; >>>>> Line:	339
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	340
	; >>>>> item->prev = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_114
L_yakc_113:
	; >>>>> Line:	343
	; >>>>> blockedTail->next = item; 
	mov	si, word [blockedTail]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	344
	; >>>>> item->prev = blockedTail; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [blockedTail]
	mov	word [si], ax
	; >>>>> Line:	345
	; >>>>> blockedTail = item; 
	mov	ax, word [bp+4]
	mov	word [blockedTail], ax
	; >>>>> Line:	346
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_114:
L_yakc_112:
	mov	sp, bp
	pop	bp
	ret
L_yakc_110:
	push	bp
	mov	bp, sp
	jmp	L_yakc_111
	ALIGN	2
YKRemoveBlocked:
	; >>>>> Line:	351
	; >>>>> void YKRemoveBlocked(struct Task* item){ 
	jmp	L_yakc_116
L_yakc_117:
	; >>>>> Line:	352
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_118
	; >>>>> Line:	353
	; >>>>> if (item- 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_119
	; >>>>> Line:	354
	; >>>>> (item->prev)->next = item->next; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 8
	mov	di, word [di]
	add	di, 6
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_120
L_yakc_119:
	; >>>>> Line:	357
	; >>>>> blockedHead = item->next; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	mov	word [blockedHead], ax
L_yakc_120:
	; >>>>> Line:	359
	; >>>>> if (item->next != 0) { 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_121
	; >>>>> Line:	360
	; >>>>> (item->next)->prev = item->prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 6
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_122
L_yakc_121:
	; >>>>> Line:	363
	; >>>>> blockedTail = item->prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [blockedTail], ax
L_yakc_122:
L_yakc_118:
	mov	sp, bp
	pop	bp
	ret
L_yakc_116:
	push	bp
	mov	bp, sp
	jmp	L_yakc_117
L_yakc_127:
	DB	0xA,0xD,"PrintStack: item is NULL",0
L_yakc_126:
	DB	"]",0xA,0xD,0
L_yakc_125:
	DB	": [",0
L_yakc_124:
	DB	0xA,0xD,"Printing Stack:",0xA,0xD,0
	ALIGN	2
printStack:
	; >>>>> Line:	371
	; >>>>> void printStack(struct Task* item){ 
	jmp	L_yakc_128
L_yakc_129:
	; >>>>> Line:	374
	; >>>>> k = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	375
	; >>>>> if (item != 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_130
	; >>>>> Line:	376
	; >>>>> tempSP = item->taskSP; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	377
	; >>>>> printString("\n\rPrinting Stack:\n\r"); 
	mov	ax, L_yakc_124
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	378
	; >>>>> for (k; k<12; k++){ 
	jmp	L_yakc_132
L_yakc_131:
	; >>>>> Line:	379
	; >>>>> printWord((int)tempSP); 
	push	word [bp-4]
	call	printWord
	add	sp, 2
	; >>>>> Line:	380
	; >>>>> printString(": ["); 
	mov	ax, L_yakc_125
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	381
	; >>>>> printWord(*tempSP); 
	mov	si, word [bp-4]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	382
	; >>>>> printString("]\n\r"); 
	mov	ax, L_yakc_126
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	383
	; >>>>> tempSP = tempSP+1; 
	mov	ax, word [bp-4]
	add	ax, 2
	mov	word [bp-4], ax
L_yakc_134:
	inc	word [bp-2]
L_yakc_132:
	cmp	word [bp-2], 12
	jl	L_yakc_131
L_yakc_133:
	jmp	L_yakc_135
L_yakc_130:
	; >>>>> Line:	387
	; >>>>> printString("\n\rPrintStack: item is NULL"); 
	mov	ax, L_yakc_127
	push	ax
	call	printString
	add	sp, 2
L_yakc_135:
	mov	sp, bp
	pop	bp
	ret
L_yakc_128:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_129
L_yakc_141:
	DB	"Blocked List:",0xA,0xD,0
L_yakc_140:
	DB	"] ",0
L_yakc_139:
	DB	", ",0
L_yakc_138:
	DB	"[0x",0
L_yakc_137:
	DB	0xA,0xD,"Ready List:",0xA,0xD,0
	ALIGN	2
printLists:
	; >>>>> Line:	392
	; >>>>> void printLists(void){ 
	jmp	L_yakc_142
L_yakc_143:
	; >>>>> Line:	394
	; >>>>> printString("\n\rReady List:\n\r"); 
	mov	ax, L_yakc_137
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	395
	; >>>>> temp = readyHead; 
	mov	ax, word [readyHead]
	mov	word [bp-2], ax
	; >>>>> Line:	396
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_145
L_yakc_144:
	; >>>>> Line:	397
	; >>>>> printString("[0x"); 
	mov	ax, L_yakc_138
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	398
	; >>>>> printByte(temp->taskPriority); 
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	399
	; >>>>> printString(", "); 
	mov	ax, L_yakc_139
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	400
	; >>>>> printWord(temp->taskDelay); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	401
	; >>>>> printString(", "); 
	mov	ax, L_yakc_139
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	402
	; >>>>> printWord((int)temp->taskSP); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	403
	; >>>>> printString("] "); 
	mov	ax, L_yakc_140
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	404
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_145:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_144
L_yakc_146:
	; >>>>> Line:	406
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	407
	; >>>>> temp = blockedHead; 
	mov	ax, word [blockedHead]
	mov	word [bp-2], ax
	; >>>>> Line:	408
	; >>>>> printString("Blocked List:\n\r"); 
	mov	ax, L_yakc_141
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	409
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_148
L_yakc_147:
	; >>>>> Line:	410
	; >>>>> printString("[0x"); 
	mov	ax, L_yakc_138
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	411
	; >>>>> printByte(tem 
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	412
	; >>>>> printString(", "); 
	mov	ax, L_yakc_139
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	413
	; >>>>> printWord(temp->taskDelay); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	414
	; >>>>> printString(", "); 
	mov	ax, L_yakc_139
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	415
	; >>>>> printWord((int)temp->taskSP); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	416
	; >>>>> printString("] "); 
	mov	ax, L_yakc_140
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	417
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_148:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_147
L_yakc_149:
	; >>>>> Line:	419
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_42+2)
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_142:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_143
	ALIGN	2
YKTickCount:
	TIMES	2 db 0
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKsave:
	TIMES	2 db 0
YKrestore:
	TIMES	2 db 0
YKtaskCount:
	TIMES	2 db 0
YKRunFlag:
	TIMES	2 db 0
YKIsrDepth:
	TIMES	2 db 0
YKIdleVar:
	TIMES	2 db 0
readyHead:
	TIMES	2 db 0
readyTail:
	TIMES	2 db 0
blockedHead:
	TIMES	2 db 0
blockedTail:
	TIMES	2 db 0
YKRunningTask:
	TIMES	2 db 0
pendHead:
	TIMES	2 db 0
pendTail:
	TIMES	2 db 0
YKTasks:
	TIMES	40 db 0
YKIdleStk:
	TIMES	512 db 0
YKSemaphors:
	TIMES	60 db 0
semCount:
	TIMES	2 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab5_app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab5_app_3:
	DB	"works",0
L_lab5_app_2:
	DB	"it",0
L_lab5_app_1:
	DB	"Hey",0
	ALIGN	2
TaskWord:
	; >>>>> Line:	24
	; >>>>> { 
	jmp	L_lab5_app_4
L_lab5_app_5:
	; >>>>> Line:	25
	; >>>>> while (1) 
	jmp	L_lab5_app_7
L_lab5_app_6:
	; >>>>> Line:	27
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	28
	; >>>>> printString("Hey"); 
	mov	ax, L_lab5_app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	29
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	31
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	32
	; >>>>> printString("it"); 
	mov	ax, L_lab5_app_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	33
	; >>>>> YKSemPost(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	35
	; >>>>> YKSemPend(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	36
	; >>>>> ayTask(6); 
	mov	ax, L_lab5_app_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	37
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
L_lab5_app_7:
	jmp	L_lab5_app_6
L_lab5_app_8:
	mov	sp, bp
	pop	bp
	ret
L_lab5_app_4:
	push	bp
	mov	bp, sp
	jmp	L_lab5_app_5
	ALIGN	2
TaskSpace:
	; >>>>> Line:	42
	; >>>>> { 
	jmp	L_lab5_app_10
L_lab5_app_11:
	; >>>>> Line:	43
	; >>>>> while (1) 
	jmp	L_lab5_app_13
L_lab5_app_12:
	; >>>>> Line:	45
	; >>>>> YKSemPend(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> printChar(' '); 
	mov	al, 32
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	47
	; >>>>> YKSemPost(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPost
	add	sp, 2
L_lab5_app_13:
	jmp	L_lab5_app_12
L_lab5_app_14:
	mov	sp, bp
	pop	bp
	ret
L_lab5_app_10:
	push	bp
	mov	bp, sp
	jmp	L_lab5_app_11
L_lab5_app_16:
	DB	"!",'"',0xD,0xA,0
	ALIGN	2
TaskPunc:
	; >>>>> Line:	52
	; >>>>> { 
	jmp	L_lab5_app_17
L_lab5_app_18:
	; >>>>> Line:	53
	; >>>>> while (1) 
	jmp	L_lab5_app_20
L_lab5_app_19:
	; >>>>> Line:	55
	; >>>>> YKSemPend(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	56
	; >>>>> printChar('"'); 
	mov	al, 34
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	57
	; >>>>> YKSemPost(WSemPtr); 
	push	word [WSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	59
	; >>>>> YKSemPend(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	60
	; >>>>> printChar(','); 
	mov	al, 44
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	61
	; >>>>> YKSemPost(SSemPtr); 
	push	word [SSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	63
	; >>>>> YKSemPend(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	64
	; >>>>> printString("!\"\r\n"); 
	mov	ax, L_lab5_app_16
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	65
	; >>>>> YKSemPost(PSemPtr); 
	push	word [PSemPtr]
	call	YKSemPost
	add	sp, 2
	; >>>>> Line:	67
	; >>>>> YKDelayTask(6); 
	mov	ax, 6
	push	ax
	call	YKDelayTask
	add	sp, 2
L_lab5_app_20:
	jmp	L_lab5_app_19
L_lab5_app_21:
	mov	sp, bp
	pop	bp
	ret
L_lab5_app_17:
	push	bp
	mov	bp, sp
	jmp	L_lab5_app_18
	ALIGN	2
TaskPrime:
	; >>>>> Line:	72
	; >>>>> { 
	jmp	L_lab5_app_23
L_lab5_app_24:
	; >>>>> Line:	77
	; >>>>> while (1) 
	mov	word [bp-2], 1001
	; >>>>> Line:	77
	; >>>>> while (1) 
	jmp	L_lab5_app_26
L_lab5_app_25:
	; >>>>> Line:	79
	; >>>>> YKSemPend(NSemPtr); 
	push	word [NSemPtr]
	call	YKSemPend
	add	sp, 2
	; >>>>> Line:	82
	; >>>>> lncnt = 0; 
	mov	word [bp-8], 0
	; >>>>> Line:	83
	; >>>>> endval = curval + 500; 
	mov	ax, word [bp-2]
	add	ax, 500
	mov	word [bp-10], ax
	; >>>>> Line:	84
	; >>>>> for ( ; curval < endval; curval += 2) 
	jmp	L_lab5_app_29
L_lab5_app_28:
	; >>>>> Line:	86
	; >>>>> flag = 0; 
	mov	word [bp-6], 0
	; >>>>> Line:	87
	; >>>>> for (j = 3; (j*j) < curval; j += 2) 
	mov	word [bp-4], 3
	jmp	L_lab5_app_33
L_lab5_app_32:
	; >>>>> Line:	89
	; >>>>> if (curval % j == 0) 
	mov	ax, word [bp-2]
	cwd
	idiv	word [bp-4]
	mov	ax, dx
	test	ax, ax
	jne	L_lab5_app_36
	; >>>>> Line:	91
	; >>>>> flag = 1; 
	mov	word [bp-6], 1
	; >>>>> Line:	92
	; >>>>> break; 
	jmp	L_lab5_app_34
L_lab5_app_36:
L_lab5_app_35:
	add	word [bp-4], 2
L_lab5_app_33:
	mov	ax, word [bp-4]
	imul	word [bp-4]
	mov	dx, word [bp-2]
	cmp	dx, ax
	jg	L_lab5_app_32
L_lab5_app_34:
	; >>>>> Line:	95
	; >>>>> if (!flag) 
	mov	ax, word [bp-6]
	test	ax, ax
	jne	L_lab5_app_37
	; >>>>> Line:	97
	; >>>>> = 0; 
	mov	al, 32
	push	ax
	call	printChar
	add	sp, 2
	; >>>>> Line:	98
	; >>>>> printInt(curval); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	99
	; >>>>> lncnt++; 
	inc	word [bp-8]
	; >>>>> Line:	100
	; >>>>> if (lncnt > 9) 
	cmp	word [bp-8], 9
	jle	L_lab5_app_38
	; >>>>> Line:	102
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	103
	; >>>>> lncnt = 0; 
	mov	word [bp-8], 0
L_lab5_app_38:
L_lab5_app_37:
L_lab5_app_31:
	add	word [bp-2], 2
L_lab5_app_29:
	mov	ax, word [bp-10]
	cmp	ax, word [bp-2]
	jg	L_lab5_app_28
L_lab5_app_30:
	; >>>>> Line:	107
	; >>>>> printNewLine(); 
	call	printNewLine
L_lab5_app_26:
	jmp	L_lab5_app_25
L_lab5_app_27:
	mov	sp, bp
	pop	bp
	ret
L_lab5_app_23:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_lab5_app_24
L_lab5_app_44:
	DB	"% >>>>>",0xD,0xA,0
L_lab5_app_43:
	DB	", CPU usage: ",0
L_lab5_app_42:
	DB	"<<<<< Context switches: ",0
L_lab5_app_41:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab5_app_40:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
TaskStat:
	; >>>>> Line:	112
	; >>>>> { 
	jmp	L_lab5_app_45
L_lab5_app_46:
	; >>>>> Line:	116
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	117
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab5_app_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	118
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_lab5_app_41
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	119
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	120
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	121
	; >>>>> p 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	122
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	123
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	125
	; >>>>> YKNewTask(TaskPrime, (void *) &TaskPRMStk[512], 32); 
	mov	al, 32
	push	ax
	mov	ax, (TaskPRMStk+1024)
	push	ax
	mov	ax, TaskPrime
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	126
	; >>>>> YKNewTask(TaskWord, (void *) &TaskWStk[512], 10); 
	mov	al, 10
	push	ax
	mov	ax, (TaskWStk+1024)
	push	ax
	mov	ax, TaskWord
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	127
	; >>>>> YKNewTask(TaskSpace, (void *) &TaskSStk[512], 11); 
	mov	al, 11
	push	ax
	mov	ax, (TaskSStk+1024)
	push	ax
	mov	ax, TaskSpace
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	128
	; >>>>> YKNewTask(TaskPunc, (void *) &TaskPStk[512], 12); 
	mov	al, 12
	push	ax
	mov	ax, (TaskPStk+1024)
	push	ax
	mov	ax, TaskPunc
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	130
	; >>>>> while (1) 
	jmp	L_lab5_app_48
L_lab5_app_47:
	; >>>>> Line:	132
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	135
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	136
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	137
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	139
	; >>>>> printString ("<<<<< Context switches: "); 
	mov	ax, L_lab5_app_42
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	140
	; >>>>> ; 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	141
	; >>>>> printString(", CPU usage: "); 
	mov	ax, L_lab5_app_43
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	142
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	143
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	144
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_lab5_app_44
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	146
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	147
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	148
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	149
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab5_app_48:
	jmp	L_lab5_app_47
L_lab5_app_49:
	mov	sp, bp
	pop	bp
	ret
L_lab5_app_45:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab5_app_46
	ALIGN	2
main:
	; >>>>> Line:	154
	; >>>>> { 
	jmp	L_lab5_app_51
L_lab5_app_52:
	; >>>>> Line:	155
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	158
	; >>>>> PSemPtr = YKSemCreate(1); 
	mov	ax, 1
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [PSemPtr], ax
	; >>>>> Line:	159
	; >>>>> SSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [SSemPtr], ax
	; >>>>> Line:	160
	; >>>>> WSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [WSemPtr], ax
	; >>>>> Line:	161
	; >>>>> NSemPtr = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	mov	word [NSemPtr], ax
	; >>>>> Line:	162
	; >>>>> YKNewTask(TaskStat, (void *) &TaskStatStk[512], 30); 
	mov	al, 30
	push	ax
	mov	ax, (TaskStatStk+1024)
	push	ax
	mov	ax, TaskStat
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	164
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab5_app_51:
	push	bp
	mov	bp, sp
	jmp	L_lab5_app_52
	ALIGN	2
TaskWStk:
	TIMES	1024 db 0
TaskSStk:
	TIMES	1024 db 0
TaskPStk:
	TIMES	1024 db 0
TaskStatStk:
	TIMES	1024 db 0
TaskPRMStk:
	TIMES	1024 db 0
PSemPtr:
	TIMES	2 db 0
SSemPtr:
	TIMES	2 db 0
WSemPtr:
	TIMES	2 db 0
NSemPtr:
	TIMES	2 db 0
