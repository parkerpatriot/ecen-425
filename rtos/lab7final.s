        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      isr_reset ; Reset               ; Int 08h (IRQ 0)
        dd      isr_tick ; Tick                ; Int 09h (IRQ 1)
        dd      isr_keypress ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

isr_reset:
	call YKResetHandler

isr_keypress:
	push	bp
	push	si
	push	di
	push	ds
	push	es
	push	dx
	push	cx
	push	bx
	push	ax
	call	YKEnterISR
	sti
	call	YKKeypressHandler
	cli
	call 	signalEOI ; tell the PIC that we're done with the ISR
	call	YKExitISR	
	pop	ax
	pop	bx
	pop	cx
	pop	dx
	pop	es
	pop	ds
	pop	di
	pop	si
	pop	bp	
	iret

isr_tick:
	push	bp
	push	si	
	push	di
	push	ds
	push	es
	push	dx
	push	cx
	push	bx
	push	ax
	call	YKEnterISR
	;sti tick should never be interrupted
	call	YKTickHandler
	cli
	call 	signalEOI ; tell the PIC that we're done with the ISR
	call	YKExitISR	
	pop	ax
	pop	bx
	pop	cx
	pop	dx
	pop	es
	pop	ds
	pop	di
	pop	si
	pop	bp	
	iret

YKEnterMutex:
	cli
	ret
YKExitMutex:
	sti
	ret
YKSaveContext:
	cli
	pushf
	push	cs
	push	word[bp+2]
	push	word[bp]
	push	si
	push	di
	push	ds
	push	es
	push	dx
	push	cx
	push	bx
	push	ax
	mov		bx, [YKsave]
	mov		[bx], sp
	jmp		YKRestoreContext
YKDispatcher:
	push	bp
	mov		bp, sp
	push	ax
	mov		ax, [bp+4] 	; get arg
	cmp		ax, 1		;save context?
	pop		ax
	je		YKSaveContext
YKRestoreContext:
	mov		sp, [YKrestore]
	pop		ax
	pop		bx
	pop		cx
	pop		dx
	pop		es
	pop		ds
	pop		di
	pop		si
	pop		bp	
	iret
YKSaveSP:
	push 	bp
	mov 	bp, sp
	add		sp, 8 	; two function calls away
	mov 	bx, [YKsave]
	mov 	[bx], sp
	sub		sp, 8 	; undo sp adjustment
	mov 	sp, bp
	pop		bp
	ret
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	67
	; >>>>> YKEVENT* YKEventCreate(unsigned init_val){ 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	69
	; >>>>> ockedHead 
	mov	ax, word [YKEventCount]
	shl	ax, 1
	shl	ax, 1
	add	ax, YKEvents
	mov	word [bp-2], ax
	; >>>>> Line:	70
	; >>>>> tempEvent->allEvents = init_val; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	71
	; >>>>> tempEvent->blockedHead = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	72
	; >>>>> YKEventCount++; 
	inc	word [YKEventCount]
	; >>>>> Line:	73
	; >>>>> return tempEvent; 
	mov	ax, word [bp-2]
L_yakc_3:
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
L_yakc_5:
	DB	"Error! No events specified!",0xA,0xD,0
	ALIGN	2
YKEventPend:
	; >>>>> Line:	76
	; >>>>> unsigned YKEventPend(YKEVENT *event, unsigned eventMask, int waitMode) { 
	jmp	L_yakc_6
L_yakc_7:
	; >>>>> Line:	77
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	79
	; >>>>> if(!eventMask | event==0){ 
	mov	ax, word [bp+6]
	test	ax, ax
	je	L_yakc_9
	xor	ax, ax
	jmp	L_yakc_10
L_yakc_9:
	mov	ax, 1
L_yakc_10:
	mov	dx, word [bp+4]
	test	dx, dx
	je	L_yakc_11
	xor	dx, dx
	jmp	L_yakc_12
L_yakc_11:
	mov	dx, 1
L_yakc_12:
	or	ax, dx
	je	L_yakc_8
	; >>>>> Line:	80
	; >>>>> printString("Error! No events specified!\n\r"); 
	mov	ax, L_yakc_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	81
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	82
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_13
	jmp	L_yakc_14
L_yakc_8:
	; >>>>> Line:	85
	; >>>>> YKRunningTask->waitMode = waitMode; 
	mov	si, word [YKRunningTask]
	add	si, 12
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	86
	; >>>>> YKRunningTask->eventPend = eventMask; 
	mov	si, word [YKRunningTask]
	add	si, 10
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	87
	; >>>>> YKRemoveSorted(YKRunningTask, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [YKRunningTask]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	88
	; >>>>> YKInsertSorted(YKRunningTask, &(event->blockedHead 
	mov	ax, word [bp+4]
	add	ax, 2
	push	ax
	push	word [YKRunningTask]
	call	YKInsertSorted
	add	sp, 4
	; >>>>> Line:	89
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	90
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	91
	; >>>>> return event->allEvents; 
	mov	si, word [bp+4]
	mov	ax, word [si]
L_yakc_14:
L_yakc_13:
	mov	sp, bp
	pop	bp
	ret
L_yakc_6:
	push	bp
	mov	bp, sp
	jmp	L_yakc_7
L_yakc_16:
	DB	"Error no events specified!",0xA,0xD,0
	ALIGN	2
YKEventSet:
	; >>>>> Line:	95
	; >>>>> void YKEventSet(YKEVENT *event, unsigned eventMask) { 
	jmp	L_yakc_17
L_yakc_18:
	; >>>>> Line:	101
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	103
	; >>>>> if(!eventMask | event==0){ 
	mov	ax, word [bp+6]
	test	ax, ax
	je	L_yakc_20
	xor	ax, ax
	jmp	L_yakc_21
L_yakc_20:
	mov	ax, 1
L_yakc_21:
	mov	dx, word [bp+4]
	test	dx, dx
	je	L_yakc_22
	xor	dx, dx
	jmp	L_yakc_23
L_yakc_22:
	mov	dx, 1
L_yakc_23:
	or	ax, dx
	je	L_yakc_19
	; >>>>> Line:	104
	; >>>>> printString("Error no events specified!\n\r"); 
	mov	ax, L_yakc_16
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	105
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	jmp	L_yakc_24
L_yakc_19:
	; >>>>> Line:	108
	; >>>>> event->allEvents = event->allEvents | eventMask; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	or	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	109
	; >>>>> if(event->blockedHead != 0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_25
	; >>>>> Line:	110
	; >>>>> tempTask = event->blockedHead; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_26:
	; >>>>> Line:	112
	; >>>>> nextTask = tempTask->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	113
	; >>>>> if (tempTask->waitM 
	mov	si, word [bp-2]
	add	si, 12
	cmp	word [si], 1
	jne	L_yakc_29
	; >>>>> Line:	114
	; >>>>> result = tempTask->eventPend & event->allEvents; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	115
	; >>>>> if(result){ 
	mov	ax, word [bp-8]
	test	ax, ax
	je	L_yakc_30
	; >>>>> Line:	116
	; >>>>> YKRemoveSorted(tempTask, &(event->blockedHead)); 
	mov	ax, word [bp+4]
	add	ax, 2
	push	ax
	push	word [bp-2]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	117
	; >>>>> YKInsertSorted(tempTask, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKInsertSorted
	add	sp, 4
L_yakc_30:
	jmp	L_yakc_31
L_yakc_29:
	; >>>>> Line:	121
	; >>>>> else if(tempTask->waitMode==2){ 
	mov	si, word [bp-2]
	add	si, 12
	cmp	word [si], 2
	jne	L_yakc_32
	; >>>>> Line:	122
	; >>>>> result = tempTask->eventPend & event->allEvents; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [si]
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	word [bp-8], ax
	; >>>>> Line:	123
	; >>>>> if(result == tempTask->eventPend){ 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp-8]
	cmp	ax, word [si]
	jne	L_yakc_33
	; >>>>> Line:	124
	; >>>>> YKRemoveSorted(tempTask, &(event->blockedHead)); 
	mov	ax, word [bp+4]
	add	ax, 2
	push	ax
	push	word [bp-2]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	125
	; >>>>> YKInsertSorted(tempTask, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKInsertSorted
	add	sp, 4
L_yakc_33:
L_yakc_32:
L_yakc_31:
	; >>>>> Line:	129
	; >>>>> tempTask = nextTask; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
L_yakc_27:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_26
L_yakc_28:
	; >>>>> Line:	131
	; >>>>> if ( YKIsrDepth==0){ 
	mov	ax, word [YKIsrDepth]
	test	ax, ax
	jne	L_yakc_34
	; >>>>> Line:	132
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_34:
L_yakc_25:
L_yakc_24:
	; >>>>> Line:	136
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_17:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_yakc_18
	ALIGN	2
YKEventReset:
	; >>>>> Line:	139
	; >>>>> void YKEventReset(YKEVENT *event, unsigned eventMask){ 
	jmp	L_yakc_36
L_yakc_37:
	; >>>>> Line:	140
	; >>>>> event->allEvents &= (~eventMask); 
	mov	si, word [bp+4]
	mov	ax, word [bp+6]
	not	ax
	and	word [si], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_36:
	push	bp
	mov	bp, sp
	jmp	L_yakc_37
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	153
	; >>>>> void YKIdleTask(void){ 
	jmp	L_yakc_39
L_yakc_40:
	; >>>>> Line:	154
	; >>>>> while(1){ 
	jmp	L_yakc_42
L_yakc_41:
	; >>>>> Line:	155
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
	; >>>>> Line:	156
	; >>>>> if(YKIdleVar){ 
	mov	ax, word [YKIdleVar]
	test	ax, ax
	je	L_yakc_44
	; >>>>> Line:	157
	; >>>>> YKIdleVar++; 
	inc	word [YKIdleVar]
L_yakc_44:
L_yakc_42:
	jmp	L_yakc_41
L_yakc_43:
	mov	sp, bp
	pop	bp
	ret
L_yakc_39:
	push	bp
	mov	bp, sp
	jmp	L_yakc_40
	ALIGN	2
YKInitialize:
	; >>>>> Line:	162
	; >>>>> void YKInitialize(void){ 
	jmp	L_yakc_46
L_yakc_47:
	; >>>>> Line:	163
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	164
	; >>>>> YKsave = 0; 
	mov	word [YKsave], 0
	; >>>>> Line:	165
	; >>>>> YKrestore = 0; 
	mov	word [YKrestore], 0
	; >>>>> Line:	166
	; >>>>> YKTickCount = 0; 
	mov	word [YKTickCount], 0
	; >>>>> Line:	167
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	168
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	169
	; >>>>> YKRunFlag = 0; 
	mov	word [YKRunFlag], 0
	; >>>>> Line:	170
	; >>>>> YKtaskCount = 0; 
	mov	word [YKtaskCount], 0
	; >>>>> Line:	171
	; >>>>> readyHead = 0; 
	mov	word [readyHead], 0
	; >>>>> Line:	172
	; >>>>> readyTail = 0; 
	mov	word [readyTail], 0
	; >>>>> Line:	173
	; >>>>> blockedHead = 0; 
	mov	word [blockedHead], 0
	; >>>>> Line:	174
	; >>>>> blockedTail = 0; 
	mov	word [blockedTail], 0
	; >>>>> Line:	175
	; >>>>> YKRunningTask = 0; 
	mov	word [YKRunningTask], 0
	; >>>>> Line:	176
	; >>>>> skPriority  
	mov	word [YKIsrDepth], 0
	; >>>>> Line:	177
	; >>>>> YKSemCount = 0; 
	mov	word [YKSemCount], 0
	; >>>>> Line:	178
	; >>>>> YKNewTask(&YKIdleTask, &YKIdleStk[256], 100); 
	mov	al, 100
	push	ax
	mov	ax, (YKIdleStk+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yakc_46:
	push	bp
	mov	bp, sp
	jmp	L_yakc_47
	ALIGN	2
YKNewTask:
	; >>>>> Line:	181
	; >>>>> void YKNewTask(void (*task)(void), int *taskStack, unsigned char priority){ 
	jmp	L_yakc_49
L_yakc_50:
	; >>>>> Line:	185
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	187
	; >>>>> tempSP = taskStack-1; 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	word [bp-4], ax
	; >>>>> Line:	188
	; >>>>> *tempSP = 0x0200; 
	mov	si, word [bp-4]
	mov	word [si], 512
	; >>>>> Line:	189
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	190
	; >>>>> *tempSP = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	191
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	192
	; >>>>> *tempSP = (int)task; 
	mov	si, word [bp-4]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	193
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	194
	; >>>>> *tempSP = (int)(taskStack-1); 
	mov	ax, word [bp+6]
	sub	ax, 2
	mov	si, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	195
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
	; >>>>> Line:	197
	; >>>>> for(k = 0; k <=7; k++){ 
	mov	word [bp-6], 0
	jmp	L_yakc_52
L_yakc_51:
	; >>>>> Line:	198
	; >>>>> *tempSP = 0; 
	mov	si, word [bp-4]
	mov	word [si], 0
	; >>>>> Line:	199
	; >>>>> --tempSP; 
	sub	word [bp-4], 2
L_yakc_54:
	inc	word [bp-6]
L_yakc_52:
	cmp	word [bp-6], 7
	jle	L_yakc_51
L_yakc_53:
	; >>>>> Line:	203
	; >>>>> tempTask = &YKTasks[YKtaskCount]; 
	mov	ax, word [YKtaskCount]
	mov	cx, 14
	imul	cx
	add	ax, YKTasks
	mov	word [bp-2], ax
	; >>>>> Line:	204
	; >>>>> tempTask->taskSP = tempSP+1; 
	mov	ax, word [bp-4]
	add	ax, 2
	mov	si, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	205
	; >>>>> tempTask->taskPriority  
	mov	si, word [bp-2]
	add	si, 2
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	206
	; >>>>> tempTask->taskDelay = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	208
	; >>>>> YKtaskCount++; 
	inc	word [YKtaskCount]
	; >>>>> Line:	210
	; >>>>> YKInsertSorted(tempTask, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKInsertSorted
	add	sp, 4
	; >>>>> Line:	215
	; >>>>> if (YKRunFlag == 1){ 
	cmp	word [YKRunFlag], 1
	jne	L_yakc_55
	; >>>>> Line:	216
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	217
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_55:
	mov	sp, bp
	pop	bp
	ret
L_yakc_49:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yakc_50
L_yakc_57:
	DB	"YKRun Failed: readyHead is Null",0
	ALIGN	2
YKRun:
	; >>>>> Line:	222
	; >>>>> void YKRun(void) { 
	jmp	L_yakc_58
L_yakc_59:
	; >>>>> Line:	223
	; >>>>> if (readyHead != 0){ 
	mov	ax, word [readyHead]
	test	ax, ax
	je	L_yakc_60
	; >>>>> Line:	224
	; >>>>> YKRunFlag = 1; 
	mov	word [YKRunFlag], 1
	; >>>>> Line:	225
	; >>>>> YKrestore = readyHead->taskSP; 
	mov	si, word [readyHead]
	mov	ax, word [si]
	mov	word [YKrestore], ax
	; >>>>> Line:	226
	; >>>>> YKRunningTask = readyHead; 
	mov	ax, word [readyHead]
	mov	word [YKRunningTask], ax
	; >>>>> Line:	227
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	228
	; >>>>> YKDispatcher(0); 
	xor	ax, ax
	push	ax
	call	YKDispatcher
	add	sp, 2
	jmp	L_yakc_61
L_yakc_60:
	; >>>>> Line:	231
	; >>>>> printString("YKRun Failed: readyHead is Null"); 
	mov	ax, L_yakc_57
	push	ax
	call	printString
	add	sp, 2
L_yakc_61:
	mov	sp, bp
	pop	bp
	ret
L_yakc_58:
	push	bp
	mov	bp, sp
	jmp	L_yakc_59
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	236
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yakc_63
L_yakc_64:
	; >>>>> Line:	238
	; >>>>> if (count != 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_65
	; >>>>> Line:	239
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	240
	; >>>>> item = YKRunningTask; 
	mov	ax, word [YKRunningTask]
	mov	word [bp-2], ax
	; >>>>> Line:	241
	; >>>>> item->ta 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	242
	; >>>>> YKRemoveSorted(item, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	243
	; >>>>> YKInsertBlocked(item); 
	push	word [bp-2]
	call	YKInsertBlocked
	add	sp, 2
	; >>>>> Line:	247
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	248
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_65:
	mov	sp, bp
	pop	bp
	ret
L_yakc_63:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_64
	ALIGN	2
YKExitISR:
	; >>>>> Line:	252
	; >>>>> void YKExitISR(void){ 
	jmp	L_yakc_67
L_yakc_68:
	; >>>>> Line:	253
	; >>>>> YKIsrDepth--; 
	dec	word [YKIsrDepth]
	; >>>>> Line:	254
	; >>>>> if(YKIsrDepth == 0){ 
	mov	ax, word [YKIsrDepth]
	test	ax, ax
	jne	L_yakc_69
	; >>>>> Line:	255
	; >>>>> YKScheduler(0); 
	xor	ax, ax
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_69:
	mov	sp, bp
	pop	bp
	ret
L_yakc_67:
	push	bp
	mov	bp, sp
	jmp	L_yakc_68
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	259
	; >>>>> void YKEnterISR(void){ 
	jmp	L_yakc_71
L_yakc_72:
	; >>>>> Line:	260
	; >>>>> YKIsrDepth++; 
	inc	word [YKIsrDepth]
	; >>>>> Line:	261
	; >>>>> if (YKIsrDepth == 1){ 
	cmp	word [YKIsrDepth], 1
	jne	L_yakc_73
	; >>>>> Line:	262
	; >>>>> YKsave = (int*)&(YKRunningTask->taskSP); 
	mov	ax, word [YKRunningTask]
	mov	word [YKsave], ax
	; >>>>> Line:	263
	; >>>>> YKSaveSP(); 
	call	YKSaveSP
L_yakc_73:
	mov	sp, bp
	pop	bp
	ret
L_yakc_71:
	push	bp
	mov	bp, sp
	jmp	L_yakc_72
	ALIGN	2
YKScheduler:
	; >>>>> Line:	267
	; >>>>> void YKScheduler(int saveContext){ 
	jmp	L_yakc_75
L_yakc_76:
	; >>>>> Line:	268
	; >>>>> if (YKRunningTask != readyHead){ 
	mov	ax, word [readyHead]
	cmp	ax, word [YKRunningTask]
	je	L_yakc_77
	; >>>>> Line:	269
	; >>>>> YKsave = (int*)&(YKRunningTask->taskSP); 
	mov	ax, word [YKRunningTask]
	mov	word [YKsave], ax
	; >>>>> Line:	270
	; >>>>> YKrestore = readyHead->taskSP; 
	mov	si, word [readyHead]
	mov	ax, word [si]
	mov	word [YKrestore], ax
	; >>>>> Line:	271
	; >>>>> YKRunningTask = readyHead; 
	mov	ax, word [readyHead]
	mov	word [YKRunningTask], ax
	; >>>>> Line:	272
	; >>>>> rEvent; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	273
	; >>>>> YKDispatcher(saveContext); 
	push	word [bp+4]
	call	YKDispatcher
	add	sp, 2
L_yakc_77:
	mov	sp, bp
	pop	bp
	ret
L_yakc_75:
	push	bp
	mov	bp, sp
	jmp	L_yakc_76
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	280
	; >>>>> void YKTickHandler(void){ 
	jmp	L_yakc_79
L_yakc_80:
	; >>>>> Line:	288
	; >>>>> YKTickCount++; 
	inc	word [YKTickCount]
	; >>>>> Line:	303
	; >>>>> temp = blockedHead; 
	mov	ax, word [blockedHead]
	mov	word [bp-2], ax
	; >>>>> Line:	305
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_82
L_yakc_81:
	; >>>>> Line:	306
	; >>>>> temp_next = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	307
	; >>>>> (temp->taskDelay)--; 
	mov	si, word [bp-2]
	add	si, 4
	dec	word [si]
	; >>>>> Line:	308
	; >>>>> if (temp->taskDelay <= 0){ 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_84
	; >>>>> Line:	309
	; >>>>> YKRemoveBlocked(temp); 
	push	word [bp-2]
	call	YKRemoveBlocked
	add	sp, 2
	; >>>>> Line:	310
	; >>>>> YKInsertSorted(temp, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKInsertSorted
	add	sp, 4
L_yakc_84:
	; >>>>> Line:	312
	; >>>>> if (temp_next != 0){ 
	mov	ax, word [bp-4]
	test	ax, ax
	je	L_yakc_85
	; >>>>> Line:	313
	; >>>>> temp = temp_next; 
	mov	word [bp-2], ax
	jmp	L_yakc_86
L_yakc_85:
	; >>>>> Line:	315
	; >>>>> else break; 
	jmp	L_yakc_83
L_yakc_86:
L_yakc_82:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_81
L_yakc_83:
	mov	sp, bp
	pop	bp
	ret
L_yakc_79:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_80
L_yakc_89:
	DB	") IGNORED",0xA,0
L_yakc_88:
	DB	0xA,"KEYPRESS (",0
	ALIGN	2
YKKeypressHandler:
	; >>>>> Line:	319
	; >>>>> void YKKeypressHandler(void){ 
	jmp	L_yakc_90
L_yakc_91:
	; >>>>> Line:	325
	; >>>>> if(KeyBuffer == 'a') YKEventSet(charEvent, 0x1); 
	cmp	word [KeyBuffer], 97
	jne	L_yakc_92
	; >>>>> Line:	325
	; >>>>> if(KeyBuffer == 'a') YKEventSet(charEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_yakc_93
L_yakc_92:
	; >>>>> Line:	326
	; >>>>> else if(KeyBuffer == 'b') YKEventSet(charEvent, 0x2); 
	cmp	word [KeyBuffer], 98
	jne	L_yakc_94
	; >>>>> Line:	326
	; >>>>> else if(KeyBuffer == 'b') YKEventSet(charEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_yakc_95
L_yakc_94:
	; >>>>> Line:	327
	; >>>>> else if(KeyBuffer == 'c') YKEventSet(charEvent, 0x4); 
	cmp	word [KeyBuffer], 99
	jne	L_yakc_96
	; >>>>> Line:	327
	; >>>>> else if(KeyBuffer == 'c') YKEventSet(charEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_yakc_97
L_yakc_96:
	; >>>>> Line:	328
	; >>>>> else if(KeyBuffer == 'd') YKEventSet(charEvent, 0x1 | 0x2 | 0x4); 
	cmp	word [KeyBuffer], 100
	jne	L_yakc_98
	; >>>>> Line:	328
	; >>>>> else if(KeyBuffer == 'd') YKEventSet(charEvent, 0x1 | 0x2 | 0x4); 
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_yakc_99
L_yakc_98:
	; >>>>> Line:	329
	; >>>>> else if(KeyBuffer == '1') YKEventSet(numEvent, 0x1); 
	cmp	word [KeyBuffer], 49
	jne	L_yakc_100
	; >>>>> Line:	329
	; >>>>> else if(KeyBuffer == '1') YKEventSet(numEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_yakc_101
L_yakc_100:
	; >>>>> Line:	330
	; >>>>> else if(KeyBuffer == '2') YKEventSet(numEvent, 0x2); 
	cmp	word [KeyBuffer], 50
	jne	L_yakc_102
	; >>>>> Line:	330
	; >>>>> else if(KeyBuffer == '2') YKEventSet(numEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_yakc_103
L_yakc_102:
	; >>>>> Line:	331
	; >>>>> else if(KeyBuffer == '3') YKEventSet(numEvent, 0x4); 
	cmp	word [KeyBuffer], 51
	jne	L_yakc_104
	; >>>>> Line:	331
	; >>>>> else if(KeyBuffer == '3') YKEventSet(numEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_yakc_105
L_yakc_104:
	; >>>>> Line:	333
	; >>>>> print("\nKEYPRESS (", 11); 
	mov	ax, 11
	push	ax
	mov	ax, L_yakc_88
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	334
	; >>>>> unningTask, 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	335
	; >>>>> print(") IGNORED\n", 10); 
	mov	ax, 10
	push	ax
	mov	ax, L_yakc_89
	push	ax
	call	print
	add	sp, 4
L_yakc_105:
L_yakc_103:
L_yakc_101:
L_yakc_99:
L_yakc_97:
L_yakc_95:
L_yakc_93:
	mov	sp, bp
	pop	bp
	ret
L_yakc_90:
	push	bp
	mov	bp, sp
	jmp	L_yakc_91
	ALIGN	2
YKResetHandler:
	; >>>>> Line:	370
	; >>>>> void YKResetHandler(){ 
	jmp	L_yakc_107
L_yakc_108:
	; >>>>> Line:	371
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_107:
	push	bp
	mov	bp, sp
	jmp	L_yakc_108
L_yakc_110:
	DB	"Error! Invalid semaphor value!",0xA,0xD,0
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	377
	; >>>>> YKSEM* YKSemCreate(int val){ 
	jmp	L_yakc_111
L_yakc_112:
	; >>>>> Line:	379
	; >>>>> if(val < 0){ 
	cmp	word [bp+4], 0
	jge	L_yakc_113
	; >>>>> Line:	380
	; >>>>> printString("Error! Invalid semaphor value!\n\r"); 
	mov	ax, L_yakc_110
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	381
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_114
L_yakc_113:
L_yakc_115:
	; >>>>> Line:	386
	; >>>>> sem = &YKSemaphors[YKSemCount]; 
	mov	ax, word [YKSemCount]
	mov	cx, 6
	imul	cx
	add	ax, YKSemaphors
	mov	word [bp-2], ax
	; >>>>> Line:	387
	; >>>>> sem->value = val; 
	mov	si, word [bp-2]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	388
	; >>>>> sem->pendHead = 0; 
	mov	si, word [bp-2]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	389
	; >>>>> sem->string = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	390
	; >>>>> YKSemCount++; 
	inc	word [YKSemCount]
	; >>>>> Line:	391
	; >>>>> return sem; 
	mov	ax, word [bp-2]
L_yakc_114:
	mov	sp, bp
	pop	bp
	ret
L_yakc_111:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_112
	ALIGN	2
YKSemPend:
	; >>>>> Line:	394
	; >>>>> void YKSemPend(YKSEM* sem){ 
	jmp	L_yakc_117
L_yakc_118:
	; >>>>> Line:	395
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	397
	; >>>>> if((sem->value)-- > 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	word [si]
	test	ax, ax
	jle	L_yakc_119
	; >>>>> Line:	398
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	399
	; >>>>> return; 
	jmp	L_yakc_120
	jmp	L_yakc_121
L_yakc_119:
	; >>>>> Line:	402
	; >>>>> YKRemoveSorted(YKRunningTask, 
	mov	ax, readyHead
	push	ax
	push	word [YKRunningTask]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	403
	; >>>>> YKInsertSorted(YKRunningTask, &(sem->pendHead)); 
	mov	ax, word [bp+4]
	add	ax, 4
	push	ax
	push	word [YKRunningTask]
	call	YKInsertSorted
	add	sp, 4
	; >>>>> Line:	404
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
	; >>>>> Line:	405
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_121:
	; >>>>> Line:	406
	; >>>>> return; 
L_yakc_120:
	mov	sp, bp
	pop	bp
	ret
L_yakc_117:
	push	bp
	mov	bp, sp
	jmp	L_yakc_118
	ALIGN	2
YKSemPost:
	; >>>>> Line:	410
	; >>>>> void YKSemPost(YKSEM* sem){ 
	jmp	L_yakc_123
L_yakc_124:
	; >>>>> Line:	412
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	414
	; >>>>> if((sem->value)++ >= 0){ 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	word [si]
	test	ax, ax
	jl	L_yakc_125
	; >>>>> Line:	415
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	416
	; >>>>> return; 
	jmp	L_yakc_126
	jmp	L_yakc_127
L_yakc_125:
	; >>>>> Line:	419
	; >>>>> pending_task = (sem->pendHead); 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	420
	; >>>>> YKRemoveSorted(pending_task, &(sem->pendHead)); 
	mov	ax, word [bp+4]
	add	ax, 4
	push	ax
	push	word [bp-2]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	421
	; >>>>> YKInsertSorted(pending_task, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKInsertSorted
	add	sp, 4
	; >>>>> Line:	422
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_127:
	; >>>>> Line:	423
	; >>>>> return; 
L_yakc_126:
	mov	sp, bp
	pop	bp
	ret
L_yakc_123:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_124
	ALIGN	2
YKQCreate:
	; >>>>> Line:	430
	; >>>>> YKQ *YKQCreate(void **start, unsigned int size){ 
	jmp	L_yakc_129
L_yakc_130:
	; >>>>> Line:	432
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	433
	; >>>>> tempQ = &YKQue 
	mov	ax, word [YKQCount]
	mov	cx, 14
	imul	cx
	add	ax, YKQueues
	mov	word [bp-2], ax
	; >>>>> Line:	434
	; >>>>> tempQ->size = size; 
	mov	si, word [bp-2]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	435
	; >>>>> tempQ->count = 0; 
	mov	si, word [bp-2]
	add	si, 2
	mov	word [si], 0
	; >>>>> Line:	436
	; >>>>> tempQ->start = (int*)start; 
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	437
	; >>>>> tempQ->end = ((int*)start) + (size-1); 
	mov	ax, word [bp+6]
	dec	ax
	shl	ax, 1
	add	ax, word [bp+4]
	mov	si, word [bp-2]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	438
	; >>>>> tempQ->head = (int*)start; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	439
	; >>>>> tempQ->next = (int*)start; 
	mov	si, word [bp-2]
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	440
	; >>>>> tempQ->blockedHead = 0; 
	mov	si, word [bp-2]
	add	si, 12
	mov	word [si], 0
	; >>>>> Line:	441
	; >>>>> YKQCount++; 
	inc	word [YKQCount]
	; >>>>> Line:	442
	; >>>>> if(YKRunFlag==1){ 
	cmp	word [YKRunFlag], 1
	jne	L_yakc_131
	; >>>>> Line:	443
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_131:
	; >>>>> Line:	448
	; >>>>> return tempQ; 
	mov	ax, word [bp-2]
L_yakc_132:
	mov	sp, bp
	pop	bp
	ret
L_yakc_129:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_130
	ALIGN	2
YKQPend:
	; >>>>> Line:	451
	; >>>>> void* YKQPend(YKQ *queue){ 
	jmp	L_yakc_134
L_yakc_135:
	; >>>>> Line:	454
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	455
	; >>>>> if (queue->count == 0){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_136
	; >>>>> Line:	456
	; >>>>> tmpTask = readyHead; 
	mov	ax, word [readyHead]
	mov	word [bp-4], ax
	; >>>>> Line:	457
	; >>>>> YKRemoveSorted(tmpTask, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-4]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	458
	; >>>>> YKInsertSorted(tmpTask, &(queue->blockedHead)); 
	mov	ax, word [bp+4]
	add	ax, 12
	push	ax
	push	word [bp-4]
	call	YKInsertSorted
	add	sp, 4
	; >>>>> Line:	459
	; >>>>> YKScheduler(1 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_136:
	; >>>>> Line:	461
	; >>>>> (queue->count)--; 
	mov	si, word [bp+4]
	add	si, 2
	dec	word [si]
	; >>>>> Line:	462
	; >>>>> tmpMsg = (void*) *(queue->head); 
	mov	si, word [bp+4]
	add	si, 8
	mov	si, word [si]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	463
	; >>>>> if (++(queue->head) > queue->end){ 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	add	ax, 2
	mov	word [si], ax
	mov	si, word [bp+4]
	add	si, 6
	mov	dx, word [si]
	cmp	dx, ax
	jae	L_yakc_137
	; >>>>> Line:	464
	; >>>>> queue->head = queue->start; 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_137:
	; >>>>> Line:	470
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	471
	; >>>>> return tmpMsg; 
	mov	ax, word [bp-2]
L_yakc_138:
	mov	sp, bp
	pop	bp
	ret
L_yakc_134:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_135
	ALIGN	2
YKQPost:
	; >>>>> Line:	474
	; >>>>> int YKQPost(YKQ *queue, void *msg){ 
	jmp	L_yakc_140
L_yakc_141:
	; >>>>> Line:	476
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	477
	; >>>>> if(queue->size == queue->count){ 
	mov	si, word [bp+4]
	add	si, 2
	mov	di, word [bp+4]
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_142
	; >>>>> Line:	478
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	479
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_143
L_yakc_142:
	; >>>>> Line:	481
	; >>>>> (queue->count)++; 
	mov	si, word [bp+4]
	add	si, 2
	inc	word [si]
	; >>>>> Line:	482
	; >>>>> *(queue->next) = (int) msg; 
	mov	si, word [bp+4]
	add	si, 10
	mov	si, word [si]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	483
	; >>>>> if (++(queue->next) > queue->end){ 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [si]
	add	ax, 2
	mov	word [si], ax
	mov	si, word [bp+4]
	add	si, 6
	mov	dx, word [si]
	cmp	dx, ax
	jae	L_yakc_144
	; >>>>> Line:	484
	; >>>>> queue->next = queue->start; 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+4]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_144:
	; >>>>> Line:	487
	; >>>>> if(queue->blockedHead != 0){ 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_145
	; >>>>> Line:	488
	; >>>>> tmpTask = queue->blockedHead; 
	mov	si, word [bp+4]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	489
	; >>>>> YKRemoveSorted(tmpTas 
	mov	ax, word [bp+4]
	add	ax, 12
	push	ax
	push	word [bp-2]
	call	YKRemoveSorted
	add	sp, 4
	; >>>>> Line:	490
	; >>>>> YKInsertSorted(tmpTask, &readyHead); 
	mov	ax, readyHead
	push	ax
	push	word [bp-2]
	call	YKInsertSorted
	add	sp, 4
	; >>>>> Line:	491
	; >>>>> if (YKIsrDepth==0){ 
	mov	ax, word [YKIsrDepth]
	test	ax, ax
	jne	L_yakc_146
	; >>>>> Line:	492
	; >>>>> YKScheduler(1); 
	mov	ax, 1
	push	ax
	call	YKScheduler
	add	sp, 2
L_yakc_146:
L_yakc_145:
	; >>>>> Line:	499
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	500
	; >>>>> return 1; 
	mov	ax, 1
L_yakc_143:
	mov	sp, bp
	pop	bp
	ret
L_yakc_140:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_141
	ALIGN	2
YKInsertSorted:
	; >>>>> Line:	506
	; >>>>> void YKInsertSorted(struct Task* item, struct Task** head){ 
	jmp	L_yakc_148
L_yakc_149:
	; >>>>> Line:	509
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_150
	; >>>>> Line:	511
	; >>>>> if (*head == 0){ 
	mov	si, word [bp+6]
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_151
	; >>>>> Line:	512
	; >>>>> *head = item; 
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	514
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	515
	; >>>>> item->prev = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_152
L_yakc_151:
	; >>>>> Line:	519
	; >>>>> temp = *head; 
	mov	si, word [bp+6]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	520
	; >>>>> temp_prev = *head; 
	mov	si, word [bp+6]
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	521
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_154
L_yakc_153:
	; >>>>> Line:	523
	; >>>>> if ((temp->taskPriority) > (item->taskPriority)){ 
	mov	si, word [bp-2]
	add	si, 2
	mov	di, word [bp+4]
	add	di, 2
	mov	al, byte [di]
	cmp	al, byte [si]
	jae	L_yakc_156
	; >>>>> Line:	525
	; >>>>> if (temp->prev == 0){ 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_157
	; >>>>> Line:	526
	; >>>>>  
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	527
	; >>>>> *head = item; 
	mov	si, word [bp+6]
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	528
	; >>>>> temp->prev = item; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	529
	; >>>>> item->prev = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_158
L_yakc_157:
	; >>>>> Line:	533
	; >>>>> (temp->prev)->next = item; 
	mov	si, word [bp-2]
	add	si, 8
	mov	si, word [si]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	534
	; >>>>> item->prev = temp->prev; 
	mov	si, word [bp-2]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	535
	; >>>>> temp->prev = item; 
	mov	si, word [bp-2]
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	536
	; >>>>> item->next = temp; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [bp-2]
	mov	word [si], ax
L_yakc_158:
	; >>>>> Line:	538
	; >>>>> return; 
	jmp	L_yakc_159
L_yakc_156:
	; >>>>> Line:	540
	; >>>>> temp_prev = temp; 
	mov	ax, word [bp-2]
	mov	word [bp-4], ax
	; >>>>> Line:	541
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_154:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_153
L_yakc_155:
	; >>>>> Line:	544
	; >>>>> temp_prev->next = item; 
	mov	si, word [bp-4]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	545
	; >>>>> item->prev = temp_prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [bp-4]
	mov	word [si], ax
	; >>>>> Line:	547
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_152:
L_yakc_150:
L_yakc_159:
	mov	sp, bp
	pop	bp
	ret
L_yakc_148:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_149
	ALIGN	2
YKRemoveSorted:
	; >>>>> Line:	552
	; >>>>> void YKRemoveSorted (struct Task* item, struct Task** head){ 
	jmp	L_yakc_161
L_yakc_162:
	; >>>>> Line:	553
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_163
	; >>>>> Line:	554
	; >>>>> if (item->prev != 0) { 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_164
	; >>>>> Line:	555
	; >>>>> (item->prev)->next = item 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 8
	mov	di, word [di]
	add	di, 6
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_165
L_yakc_164:
	; >>>>> Line:	558
	; >>>>> *head = item->next; 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+6]
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_165:
	; >>>>> Line:	560
	; >>>>> if (item->next != 0) { 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_166
	; >>>>> Line:	561
	; >>>>> (item->next)->prev = item->prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 6
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
L_yakc_166:
L_yakc_167:
L_yakc_163:
	; >>>>> Line:	565
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_161:
	push	bp
	mov	bp, sp
	jmp	L_yakc_162
	ALIGN	2
YKInsertBlocked:
	; >>>>> Line:	569
	; >>>>> void YKInsertBlocked(struct Task* item){ 
	jmp	L_yakc_169
L_yakc_170:
	; >>>>> Line:	570
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_171
	; >>>>> Line:	571
	; >>>>> if (blockedTail == 0){ 
	mov	ax, word [blockedTail]
	test	ax, ax
	jne	L_yakc_172
	; >>>>> Line:	572
	; >>>>> blockedHead = item; 
	mov	ax, word [bp+4]
	mov	word [blockedHead], ax
	; >>>>> Line:	573
	; >>>>> blockedTail = item; 
	mov	word [blockedTail], ax
	; >>>>> Line:	574
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	575
	; >>>>> item->prev = 0; 
	mov	si, word [bp+4]
	add	si, 8
	mov	word [si], 0
	jmp	L_yakc_173
L_yakc_172:
	; >>>>> Line:	578
	; >>>>> blockedTail->next = item; 
	mov	si, word [blockedTail]
	add	si, 6
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	579
	; >>>>> item->prev = blockedTail; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [blockedTail]
	mov	word [si], ax
	; >>>>> Line:	580
	; >>>>> blockedTail = item; 
	mov	ax, word [bp+4]
	mov	word [blockedTail], ax
	; >>>>> Line:	581
	; >>>>> item->next = 0; 
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], 0
L_yakc_173:
L_yakc_171:
	mov	sp, bp
	pop	bp
	ret
L_yakc_169:
	push	bp
	mov	bp, sp
	jmp	L_yakc_170
	ALIGN	2
YKRemoveBlocked:
	; >>>>> Line:	586
	; >>>>> void YKRemoveBlocked(struct Task* item){ 
	jmp	L_yakc_175
L_yakc_176:
	; >>>>> Line:	587
	; >>>>> if (item != 0) { 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_177
	; >>>>> Line:	588
	; >>>>> if (item->prev != 0) { 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_178
	; >>>>> Line:	589
	; >>>>> i 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 8
	mov	di, word [di]
	add	di, 6
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_179
L_yakc_178:
	; >>>>> Line:	592
	; >>>>> blockedHead = item->next; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	mov	word [blockedHead], ax
L_yakc_179:
	; >>>>> Line:	594
	; >>>>> if (item->next != 0) { 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	test	ax, ax
	je	L_yakc_180
	; >>>>> Line:	595
	; >>>>> (item->next)->prev = item->prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	di, word [bp+4]
	add	di, 6
	mov	di, word [di]
	add	di, 8
	mov	ax, word [si]
	mov	word [di], ax
	jmp	L_yakc_181
L_yakc_180:
	; >>>>> Line:	598
	; >>>>> blockedTail = item->prev; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [blockedTail], ax
L_yakc_181:
L_yakc_177:
	mov	sp, bp
	pop	bp
	ret
L_yakc_175:
	push	bp
	mov	bp, sp
	jmp	L_yakc_176
L_yakc_186:
	DB	0xA,0xD,"PrintStack: item is NULL",0
L_yakc_185:
	DB	"]",0xA,0xD,0
L_yakc_184:
	DB	": [",0
L_yakc_183:
	DB	0xA,0xD,"Printing Stack:",0xA,0xD,0
	ALIGN	2
printStack:
	; >>>>> Line:	606
	; >>>>> void printStack(struct Task* item){ 
	jmp	L_yakc_187
L_yakc_188:
	; >>>>> Line:	609
	; >>>>> k = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	610
	; >>>>> if (item != 0){ 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_189
	; >>>>> Line:	611
	; >>>>> tempSP = item->taskSP; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	612
	; >>>>> printString("\n\rPrinting Stack:\n\r"); 
	mov	ax, L_yakc_183
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	613
	; >>>>> for (k; k<12; k++){ 
	jmp	L_yakc_191
L_yakc_190:
	; >>>>> Line:	614
	; >>>>> printWord((int)tempSP); 
	push	word [bp-4]
	call	printWord
	add	sp, 2
	; >>>>> Line:	615
	; >>>>> printString(": ["); 
	mov	ax, L_yakc_184
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	616
	; >>>>> printWord(*tempSP); 
	mov	si, word [bp-4]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	617
	; >>>>> printString("]\n\r"); 
	mov	ax, L_yakc_185
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	618
	; >>>>> tempSP = tempSP+1; 
	mov	ax, word [bp-4]
	add	ax, 2
	mov	word [bp-4], ax
L_yakc_193:
	inc	word [bp-2]
L_yakc_191:
	cmp	word [bp-2], 12
	jl	L_yakc_190
L_yakc_192:
	jmp	L_yakc_194
L_yakc_189:
	; >>>>> Line:	622
	; >>>>> mp->taskPriority); 
	mov	ax, L_yakc_186
	push	ax
	call	printString
	add	sp, 2
L_yakc_194:
	mov	sp, bp
	pop	bp
	ret
L_yakc_187:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_188
L_yakc_200:
	DB	"Blocked List:",0xA,0xD,0
L_yakc_199:
	DB	"] ",0
L_yakc_198:
	DB	", ",0
L_yakc_197:
	DB	"[0x",0
L_yakc_196:
	DB	0xA,0xD,"Ready List:",0xA,0xD,0
	ALIGN	2
printLists:
	; >>>>> Line:	627
	; >>>>> void printLists(void){ 
	jmp	L_yakc_201
L_yakc_202:
	; >>>>> Line:	629
	; >>>>> printString("\n\rReady List:\n\r"); 
	mov	ax, L_yakc_196
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	630
	; >>>>> temp = readyHead; 
	mov	ax, word [readyHead]
	mov	word [bp-2], ax
	; >>>>> Line:	631
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_204
L_yakc_203:
	; >>>>> Line:	632
	; >>>>> printString("[0x"); 
	mov	ax, L_yakc_197
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	633
	; >>>>> printByte(temp->taskPriority); 
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	634
	; >>>>> printString(", "); 
	mov	ax, L_yakc_198
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	635
	; >>>>> printWord(temp->taskDelay); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	636
	; >>>>> printString(", "); 
	mov	ax, L_yakc_198
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	637
	; >>>>> printWord((int)temp->taskSP); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	638
	; >>>>> printString("] "); 
	mov	ax, L_yakc_199
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	639
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_204:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_203
L_yakc_205:
	; >>>>> Line:	641
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	642
	; >>>>> temp = blockedHead; 
	mov	ax, word [blockedHead]
	mov	word [bp-2], ax
	; >>>>> Line:	643
	; >>>>> printString("Blocked List:\n\r"); 
	mov	ax, L_yakc_200
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	644
	; >>>>> while(temp != 0){ 
	jmp	L_yakc_207
L_yakc_206:
	; >>>>> Line:	645
	; >>>>> printString("[0x"); 
	mov	ax, L_yakc_197
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	646
	; >>>>> printByte(temp->taskPriority); 
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	647
	; >>>>> printString(", "); 
	mov	ax, L_yakc_198
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	648
	; >>>>> printWord(temp->taskDelay); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	649
	; >>>>> printString(", "); 
	mov	ax, L_yakc_198
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	650
	; >>>>> printWord((int)temp->taskSP); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	651
	; >>>>> printString("] "); 
	mov	ax, L_yakc_199
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	652
	; >>>>> temp = temp->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_207:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_206
L_yakc_208:
	; >>>>> Line:	654
	; >>>>> printString("\n\r"); 
	mov	ax, (L_yakc_5+27)
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_201:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_202
L_yakc_216:
	DB	", qEnd: ",0
L_yakc_215:
	DB	", qStart: ",0
L_yakc_214:
	DB	", count: ",0
L_yakc_213:
	DB	", size: ",0
L_yakc_212:
	DB	", head: ",0
L_yakc_211:
	DB	"NextEmpty: ",0
L_yakc_210:
	DB	"Printing YKQ:",0xA,0xD,0
	ALIGN	2
printYKQ:
	; >>>>> Line:	657
	; >>>>> void printYKQ(YKQ *queue){ 
	jmp	L_yakc_217
L_yakc_218:
	; >>>>> Line:	659
	; >>>>> printString("Printing YKQ:\n\r"); 
	mov	ax, L_yakc_210
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	660
	; >>>>> printString("NextEmpty: "); 
	mov	ax, L_yakc_211
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	661
	; >>>>> printWord((int)queue->next); 
	mov	si, word [bp+4]
	add	si, 10
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	662
	; >>>>> printString(", head: "); 
	mov	ax, L_yakc_212
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	663
	; >>>>> printWord((int)queue->head); 
	mov	si, word [bp+4]
	add	si, 8
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	664
	; >>>>> printString(", size: "); 
	mov	ax, L_yakc_213
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	665
	; >>>>> printInt(queue->size); 
	mov	si, word [bp+4]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	666
	; >>>>> printString(", count: "); 
	mov	ax, L_yakc_214
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	667
	; >>>>> printInt(queue->count); 
	mov	si, word [bp+4]
	add	si, 2
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	668
	; >>>>> printString(", qStart: "); 
	mov	ax, L_yakc_215
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	669
	; >>>>> printWord((int)queue->start); 
	mov	si, word [bp+4]
	add	si, 4
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	670
	; >>>>> printString(", qEnd: "); 
	mov	ax, L_yakc_216
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	671
	; >>>>> printWord((int)queue->end); 
	mov	si, word [bp+4]
	add	si, 6
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	672
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_yakc_217:
	push	bp
	mov	bp, sp
	jmp	L_yakc_218
L_yakc_222:
	DB	": ",0
L_yakc_221:
	DB	"]: ",0
L_yakc_220:
	DB	"PrintingQueue:",0xA,0xD,0
	ALIGN	2
printMsgQueue:
	; >>>>> Line:	676
	; >>>>> void printMsgQueue(YKQ *queue){ 
	jmp	L_yakc_223
L_yakc_224:
	; >>>>> Line:	679
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	680
	; >>>>> printString("PrintingQueue:\n\r"); 
	mov	ax, L_yakc_220
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	681
	; >>>>> k = 0; 
	mov	word [bp-4], 0
	; >>>>> Line:	682
	; >>>>> tempMsg = (int*)queue->head; 
	mov	si, word [bp+4]
	add	si, 8
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	683
	; >>>>> if (tempMsg != 0) { 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_yakc_225
	; >>>>> Line:	684
	; >>>>> for (k; k < (queue->count); k++){ 
	jmp	L_yakc_227
L_yakc_226:
	; >>>>> Line:	685
	; >>>>> printString("["); 
	mov	ax, (L_yakc_184+2)
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	686
	; >>>>> printWord((int) tempMsg); 
	push	word [bp-2]
	call	printWord
	add	sp, 2
	; >>>>> Line:	687
	; >>>>> printString("]: "); 
	mov	ax, L_yakc_221
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	688
	; >>>>> printInt((int)*tempMsg); 
	mov	si, word [bp-2]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	689
	; >>>>> printString(": "); 
	mov	ax, L_yakc_222
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	690
	; >>>>> printInt(*((int*)*tempMsg)); 
	mov	si, word [bp-2]
	mov	si, word [si]
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	691
	; >>>>> printString(", "); 
	mov	ax, L_yakc_198
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	692
	; >>>>> tempMsg++; 
	add	word [bp-2], 2
	; >>>>> Line:	693
	; >>>>> if (((int*) tempMsg) > (queue->end)){ 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [bp-2]
	cmp	ax, word [si]
	jbe	L_yakc_230
	; >>>>> Line:	694
	; >>>>> tempMsg = queue->start; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_230:
L_yakc_229:
	inc	word [bp-4]
L_yakc_227:
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [bp-4]
	cmp	ax, word [si]
	jb	L_yakc_226
L_yakc_228:
	; >>>>> Line:	697
	; >>>>> printNewLine(); 
	call	printNewLine
L_yakc_225:
	; >>>>> Line:	699
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_223:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_224
L_yakc_232:
	DB	"Printing Event-blocked Tasks:",0xA,0xD,0
	ALIGN	2
printEventPendingTasks:
	; >>>>> Line:	703
	; >>>>> void printEventPendingTasks(YKEVENT *event){ 
	jmp	L_yakc_233
L_yakc_234:
	; >>>>> Line:	706
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	707
	; >>>>> printString("Printing Event-blocked Tasks:\n\r"); 
	mov	ax, L_yakc_232
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	708
	; >>>>> tempTask = event->blockedHead; 
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	709
	; >>>>> if(tempTask == 0) return; 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_235
	; >>>>> Line:	709
	; >>>>> if(tempTask == 0) return; 
	jmp	L_yakc_236
L_yakc_235:
L_yakc_237:
	; >>>>> Line:	711
	; >>>>> nextTask = tempTask->next; 
	mov	si, word [bp-2]
	add	si, 6
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	712
	; >>>>> printString("[0x"); 
	mov	ax, L_yakc_197
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	713
	; >>>>> printByte(tempTask->taskPriority); 
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	call	printByte
	add	sp, 2
	; >>>>> Line:	714
	; >>>>> printString(", "); 
	mov	ax, L_yakc_198
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	715
	; >>>>> printWord(tempTask->taskDelay); 
	mov	si, word [bp-2]
	add	si, 4
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	716
	; >>>>> printString(", "); 
	mov	ax, L_yakc_198
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	717
	; >>>>> printWord((int)tempTask->taskSP); 
	mov	si, word [bp-2]
	push	word [si]
	call	printWord
	add	sp, 2
	; >>>>> Line:	718
	; >>>>> printSt 
	mov	ax, L_yakc_199
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	719
	; >>>>> tempTask = nextTask; 
	mov	ax, word [bp-4]
	mov	word [bp-2], ax
L_yakc_238:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_yakc_237
L_yakc_239:
	; >>>>> Line:	721
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	722
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_236:
	mov	sp, bp
	pop	bp
	ret
L_yakc_233:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_234
	ALIGN	2
YKTickCount:
	TIMES	2 db 0
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKsave:
	TIMES	2 db 0
YKrestore:
	TIMES	2 db 0
YKtaskCount:
	TIMES	2 db 0
YKRunFlag:
	TIMES	2 db 0
YKIsrDepth:
	TIMES	2 db 0
YKSemCount:
	TIMES	2 db 0
YKQCount:
	TIMES	2 db 0
YKEventCount:
	TIMES	2 db 0
YKIdleVar:
	TIMES	2 db 0
readyHead:
	TIMES	2 db 0
readyTail:
	TIMES	2 db 0
blockedHead:
	TIMES	2 db 0
blockedTail:
	TIMES	2 db 0
YKRunningTask:
	TIMES	2 db 0
pendHead:
	TIMES	2 db 0
pendTail:
	TIMES	2 db 0
YKTasks:
	TIMES	56 db 0
YKIdleStk:
	TIMES	512 db 0
YKSemaphors:
	TIMES	60 db 0
YKQueues:
	TIMES	28 db 0
YKEvents:
	TIMES	12 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab7_app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab7_app_5:
	DB	"CharTask     (C)",0xA,0
L_lab7_app_4:
	DB	"CharTask     (B)",0xA,0
L_lab7_app_3:
	DB	"CharTask     (A)",0xA,0
L_lab7_app_2:
	DB	"Oops! At least one event should be set in return value!",0xA,0
L_lab7_app_1:
	DB	"Started CharTask     (2)",0xA,0
	ALIGN	2
CharTask:
	; >>>>> Line:	26
	; >>>>> { 
	jmp	L_lab7_app_6
L_lab7_app_7:
	; >>>>> Line:	29
	; >>>>> printString("Started CharTask     (2)\n"); 
	mov	ax, L_lab7_app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	31
	; >>>>> while(1) { 
	jmp	L_lab7_app_9
L_lab7_app_8:
	; >>>>> Line:	32
	; >>>>> events = YKEventPend(charEvent, 
	mov	ax, 1
	push	ax
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	36
	; >>>>> if(events == 0) { 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_lab7_app_11
	; >>>>> Line:	37
	; >>>>> printString("Oops! At least one event should be set " 
	mov	ax, L_lab7_app_2
	push	ax
	call	printString
	add	sp, 2
L_lab7_app_11:
	; >>>>> Line:	41
	; >>>>> if(events & 0x1) { 
	mov	ax, word [bp-2]
	and	ax, 1
	je	L_lab7_app_12
	; >>>>> Line:	42
	; >>>>> printString("CharTask     (A)\n"); 
	mov	ax, L_lab7_app_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	43
	; >>>>> YKEventReset(charEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_lab7_app_12:
	; >>>>> Line:	46
	; >>>>> if(events & 0x2) { 
	mov	ax, word [bp-2]
	and	ax, 2
	je	L_lab7_app_13
	; >>>>> Line:	47
	; >>>>> tring( 
	mov	ax, L_lab7_app_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> YKEventReset(charEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_lab7_app_13:
	; >>>>> Line:	51
	; >>>>> if(events & 0x4) { 
	mov	ax, word [bp-2]
	and	ax, 4
	je	L_lab7_app_14
	; >>>>> Line:	52
	; >>>>> printString("CharTask     (C)\n"); 
	mov	ax, L_lab7_app_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	53
	; >>>>> YKEventReset(charEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_lab7_app_14:
L_lab7_app_9:
	jmp	L_lab7_app_8
L_lab7_app_10:
	mov	sp, bp
	pop	bp
	ret
L_lab7_app_6:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab7_app_7
L_lab7_app_18:
	DB	"AllCharsTask (D)",0xA,0
L_lab7_app_17:
	DB	"Oops! Char events weren't reset by CharTask!",0xA,0
L_lab7_app_16:
	DB	"Started AllCharsTask (3)",0xA,0
	ALIGN	2
AllCharsTask:
	; >>>>> Line:	60
	; >>>>> { 
	jmp	L_lab7_app_19
L_lab7_app_20:
	; >>>>> Line:	63
	; >>>>> printString("Started AllCharsTask (3)\n"); 
	mov	ax, L_lab7_app_16
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	65
	; >>>>> while(1) { 
	jmp	L_lab7_app_22
L_lab7_app_21:
	; >>>>> Line:	66
	; >>>>> events = YKEventPend(charEvent, 
	mov	ax, 2
	push	ax
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	71
	; >>>>> if(events != 0) { 
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_lab7_app_24
	; >>>>> Line:	72
	; >>>>> printString( 
	mov	ax, L_lab7_app_17
	push	ax
	call	printString
	add	sp, 2
L_lab7_app_24:
	; >>>>> Line:	75
	; >>>>> printString("AllCharsTask (D)\n"); 
	mov	ax, L_lab7_app_18
	push	ax
	call	printString
	add	sp, 2
L_lab7_app_22:
	jmp	L_lab7_app_21
L_lab7_app_23:
	mov	sp, bp
	pop	bp
	ret
L_lab7_app_19:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab7_app_20
L_lab7_app_28:
	DB	"AllNumsTask  (123)",0xA,0
L_lab7_app_27:
	DB	"Oops! All events should be set in return value!",0xA,0
L_lab7_app_26:
	DB	"Started AllNumsTask  (1)",0xA,0
	ALIGN	2
AllNumsTask:
	; >>>>> Line:	81
	; >>>>> { 
	jmp	L_lab7_app_29
L_lab7_app_30:
	; >>>>> Line:	84
	; >>>>> printString("Started AllNumsTask  (1)\n"); 
	mov	ax, L_lab7_app_26
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	86
	; >>>>> while(1) { 
	jmp	L_lab7_app_32
L_lab7_app_31:
	; >>>>> Line:	87
	; >>>>> events = YKEventPend(numEvent, 
	mov	ax, 2
	push	ax
	mov	ax, 7
	push	ax
	push	word [numEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	91
	; >>>>> if(events != (0x1 | 0x2 | 0x4)) { 
	cmp	word [bp-2], 7
	je	L_lab7_app_34
	; >>>>> Line:	92
	; >>>>> printString("Oops! All events should be set in return value!\n"); 
	mov	ax, L_lab7_app_27
	push	ax
	call	printString
	add	sp, 2
L_lab7_app_34:
	; >>>>> Line:	95
	; >>>>> printString("AllNumsTask  (12 
	mov	ax, L_lab7_app_28
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	97
	; >>>>> YKEventReset(numEvent, 0x1 | 0x2 | 0x4); 
	mov	ax, 7
	push	ax
	push	word [numEvent]
	call	YKEventReset
	add	sp, 4
L_lab7_app_32:
	jmp	L_lab7_app_31
L_lab7_app_33:
	mov	sp, bp
	pop	bp
	ret
L_lab7_app_29:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab7_app_30
L_lab7_app_37:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab7_app_36:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	; >>>>> Line:	103
	; >>>>> { 
	jmp	L_lab7_app_38
L_lab7_app_39:
	; >>>>> Line:	107
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	108
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab7_app_36
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	109
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_lab7_app_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	110
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	111
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	112
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	113
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	114
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	116
	; >>>>> YKNewTask(CharTask, (void *) &CharTaskStk[512], 2); 
	mov	al, 2
	push	ax
	mov	ax, (CharTaskStk+1024)
	push	ax
	mov	ax, CharTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	117
	; >>>>> YKNewTask(AllNumsTask, (void *) &AllNumsTaskStk[512], 1); 
	mov	al, 1
	push	ax
	mov	ax, (AllNumsTaskStk+1024)
	push	ax
	mov	ax, AllNumsTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	118
	; >>>>> YKNewTask(AllChar 
	mov	al, 3
	push	ax
	mov	ax, (AllCharsTaskStk+1024)
	push	ax
	mov	ax, AllCharsTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	120
	; >>>>> while (1) 
	jmp	L_lab7_app_41
L_lab7_app_40:
	; >>>>> Line:	122
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	124
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	125
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	126
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	127
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	138
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	139
	; >>>>> YKCtxSwCount = 0; 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	140
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	141
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab7_app_41:
	jmp	L_lab7_app_40
L_lab7_app_42:
	mov	sp, bp
	pop	bp
	ret
L_lab7_app_38:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab7_app_39
	ALIGN	2
main:
	; >>>>> Line:	148
	; >>>>> { 
	jmp	L_lab7_app_44
L_lab7_app_45:
	; >>>>> Line:	149
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	151
	; >>>>> charEvent = YKEventCreate(0); 
	xor	ax, ax
	push	ax
	call	YKEventCreate
	add	sp, 2
	mov	word [charEvent], ax
	; >>>>> Line:	152
	; >>>>> numEvent = YKEventCreate(0); 
	xor	ax, ax
	push	ax
	call	YKEventCreate
	add	sp, 2
	mov	word [numEvent], ax
	; >>>>> Line:	153
	; >>>>> YKNewTask(STask, (void *) &STaskStk[512], 0); 
	xor	al, al
	push	ax
	mov	ax, (STaskStk+1024)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	155
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab7_app_44:
	push	bp
	mov	bp, sp
	jmp	L_lab7_app_45
	ALIGN	2
charEvent:
	TIMES	2 db 0
numEvent:
	TIMES	2 db 0
CharTaskStk:
	TIMES	1024 db 0
AllCharsTaskStk:
	TIMES	1024 db 0
AllNumsTaskStk:
	TIMES	1024 db 0
STaskStk:
	TIMES	1024 db 0
